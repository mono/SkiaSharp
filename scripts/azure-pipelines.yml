trigger:
  - main
  - develop
  - patch/*
  - refs/tags/*

pr:
  - main
  - develop
  - patch/*

variables:
  SKIASHARP_VERSION: 2.80.3
  FEATURE_NAME_PREFIX: 'feature/'
  VERBOSITY: normal
  GIT_SHA: $(Build.SourceVersion)
  GIT_BRANCH_NAME: $(Build.SourceBranchName)
  FEATURE_NAME: ''
  PREVIEW_LABEL: 'preview'
  BUILD_NUMBER: $[counter(format('{0}_{1}_{2}', variables['SKIASHARP_VERSION'], variables['Build.SourceBranch'], variables['PREVIEW_LABEL']), 1)]
  TIZEN_LINUX_PACKAGES: libxcb-xfixes0 libxcb-render-util0 libwebkitgtk-1.0-0 libxcb-image0 acl libsdl1.2debian libv4l-0 libxcb-randr0 libxcb-shape0 libxcb-icccm4 libsm6 gettext rpm2cpio cpio bridge-utils openvpn
  MANAGED_LINUX_PACKAGES: ttf-ancient-fonts ninja-build
  MONO_VERSION_MACOS: 'Latest'
  MONO_VERSION_LINUX: ''
  XCODE_VERSION: 12.4
  DOTNET_VERSION: 3.1.405
  CONFIGURATION: 'Release'
  VM_IMAGE_WINDOWS: windows-2019
  VM_IMAGE_WINDOWS_PREVIOUS: vs2017-win2016
  VM_IMAGE_MAC: macOS-10.15
  VM_IMAGE_LINUX: ubuntu-18.04
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  THROW_ON_TEST_FAILURE: true
  NUGET_DIFF_PRERELEASE: false
  ENABLE_CODE_COVERAGE: true
  EMSCRIPTEN_VERSION: 2.0.12

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main

stages:
  - stage: prepare
    displayName: Prepare Build
    jobs:
      - job: prepare                               # Prepare Build
        displayName: Prepare Build
        pool:
          vmImage: $(VM_IMAGE_LINUX)
        steps:
          - checkout: none
          - template: azure-templates-variables.yml
            parameters:
              updateBuild: true

  - stage: native_windows
    displayName: Native Windows
    dependsOn: prepare
    jobs:
      - template: azure-templates-bootstrapper.yml # Build Native Android|x86 (Win)
        parameters:
          name: native_android_x86_windows
          displayName: Android x86
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-android
          additionalArgs: --buildarch=x86
          installWindowsSdk: false
      - template: azure-templates-bootstrapper.yml # Build Native Android|x64 (Win)
        parameters:
          name: native_android_x64_windows
          displayName: Android x64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-android
          additionalArgs: --buildarch=x64
          installWindowsSdk: false
      - template: azure-templates-bootstrapper.yml # Build Native Android|arm (Win)
        parameters:
          name: native_android_arm_windows
          displayName: Android arm
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-android
          additionalArgs: --buildarch=arm
          installWindowsSdk: false
      - template: azure-templates-bootstrapper.yml # Build Native Android|arm64 (Win)
        parameters:
          name: native_android_arm64_windows
          displayName: Android arm64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-android
          additionalArgs: --buildarch=arm64
          installWindowsSdk: false
      - template: azure-templates-bootstrapper.yml # Build Native Tizen (Win)
        parameters:
          name: native_tizen_windows
          displayName: Tizen
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-tizen
          installWindowsSdk: false
      - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|x86 (Win)
        parameters:
          name: native_uwp_angle_x86_windows
          displayName: ANGLE x86
          vmImage: $(VM_IMAGE_WINDOWS)
          target: ANGLE
          additionalArgs: -Script .\native\uwp\build.cake --buildarch=x86
      - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|x64 (Win)
        parameters:
          name: native_uwp_angle_x64_windows
          displayName: ANGLE x64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: ANGLE
          additionalArgs: -Script .\native\uwp\build.cake --buildarch=x64
      - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|arm (Win)
        parameters:
          name: native_uwp_angle_arm_windows
          displayName: ANGLE arm
          vmImage: $(VM_IMAGE_WINDOWS)
          target: ANGLE
          additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm
      - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|arm64 (Win)
        parameters:
          name: native_uwp_angle_arm64_windows
          displayName: ANGLE arm64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: ANGLE
          additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm64
      - template: azure-templates-bootstrapper.yml # Build Native UWP|x86 (Win)
        parameters:
          name: native_uwp_x86_windows
          displayName: UWP x86
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-uwp
          additionalArgs: --buildarch=x86 --skipAngle=true
      - template: azure-templates-bootstrapper.yml # Build Native UWP|x64 (Win)
        parameters:
          name: native_uwp_x64_windows
          displayName: UWP x64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-uwp
          additionalArgs: --buildarch=x64 --skipAngle=true
      - template: azure-templates-bootstrapper.yml # Build Native UWP|arm (Win)
        parameters:
          name: native_uwp_arm_windows
          displayName: UWP arm
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-uwp
          additionalArgs: --buildarch=arm --skipAngle=true
      - template: azure-templates-bootstrapper.yml # Build Native UWP|arm64 (Win)
        parameters:
          name: native_uwp_arm64_windows
          displayName: UWP arm64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-uwp
          additionalArgs: --buildarch=arm64 --skipAngle=true
      - template: azure-templates-bootstrapper.yml # Build Native Win32|x86 (Win)
        parameters:
          name: native_win32_x86_windows
          displayName: Win32 x86
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-windows
          additionalArgs: --buildarch=x86
      - template: azure-templates-bootstrapper.yml # Build Native Win32|x64 (Win)
        parameters:
          name: native_win32_x64_windows
          displayName: Win32 x64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-windows
          additionalArgs: --buildarch=x64
      - template: azure-templates-bootstrapper.yml # Build Native Win32|arm64 (Win)
        parameters:
          name: native_win32_arm64_windows
          displayName: Win32 arm64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-windows
          additionalArgs: --buildarch=arm64
      - template: azure-templates-bootstrapper.yml # Build Native NanoServer|x64 (Win)
        parameters:
          name: native_win32_x64_nanoserver_windows
          displayName: Nano Server x64
          vmImage: $(VM_IMAGE_WINDOWS)
          target: externals-nanoserver
          additionalArgs: --buildarch=x64
          tools:
            - nano-api-scan

  - stage: native_macos
    displayName: Native macOS
    dependsOn: prepare
    jobs:
      - template: azure-templates-bootstrapper.yml # Build Native Android|x86 (macOS)
        parameters:
          name: native_android_x86_macos
          displayName: Android x86
          vmImage: $(VM_IMAGE_MAC)
          target: externals-android
          additionalArgs: --buildarch=x86
      - template: azure-templates-bootstrapper.yml # Build Native Android|x64 (macOS)
        parameters:
          name: native_android_x64_macos
          displayName: Android x64
          vmImage: $(VM_IMAGE_MAC)
          target: externals-android
          additionalArgs: --buildarch=x64
      - template: azure-templates-bootstrapper.yml # Build Native Android|arm (macOS)
        parameters:
          name: native_android_arm_macos
          displayName: Android arm
          vmImage: $(VM_IMAGE_MAC)
          target: externals-android
          additionalArgs: --buildarch=arm
      - template: azure-templates-bootstrapper.yml # Build Native Android|arm64 (macOS)
        parameters:
          name: native_android_arm64_macos
          displayName: Android arm64
          vmImage: $(VM_IMAGE_MAC)
          target: externals-android
          additionalArgs: --buildarch=arm64
      - template: azure-templates-bootstrapper.yml # Build Native iOS (macOS)
        parameters:
          name: native_ios_macos
          displayName: iOS
          vmImage: $(VM_IMAGE_MAC)
          target: externals-ios
      - template: azure-templates-bootstrapper.yml # Build Native macOS (macOS)
        parameters:
          name: native_macos_macos
          displayName: macOS
          vmImage: $(VM_IMAGE_MAC)
          target: externals-macos
      - template: azure-templates-bootstrapper.yml # Build Native tvOS (macOS)
        parameters:
          name: native_tvos_macos
          displayName: tvOS
          vmImage: $(VM_IMAGE_MAC)
          target: externals-tvos
      - template: azure-templates-bootstrapper.yml # Build Native watchOS (macOS)
        parameters:
          name: native_watchos_macos
          displayName: watchOS
          vmImage: $(VM_IMAGE_MAC)
          target: externals-watchos
      - template: azure-templates-bootstrapper.yml # Build Native Tizen (macOS)
        parameters:
          name: native_tizen_macos
          displayName: Tizen
          vmImage: $(VM_IMAGE_MAC)
          target: externals-tizen
          condition: false # TODO: TIZEN INSTALL BUGS

  - stage: native_linux
    displayName: Native Linux
    dependsOn: prepare
    jobs:
      - template: azure-templates-linux-matrix.yml # Build Native Linux (Linux)
        parameters:
          builds:
            - name: ''
            - name: nodeps
              desc: 'No Deps'
              additionalArgs: --verifyExcluded=fontconfig
              gnArgs: skia_use_fontconfig=false
          matrix:
            - arch: x64
              docker: scripts/Docker/ubuntu16/amd64
            - arch: x64
              variant: alpine
              docker: scripts/Docker/alpine/amd64
            - arch: arm
              docker: scripts/Docker/ubuntu16/clang-cross
              target: externals-linux-clang-cross
            - arch: arm64
              docker: scripts/Docker/ubuntu16/clang-cross
              dockerArgs: --build-arg TOOLCHAIN_ARCH=aarch64-linux-gnu --build-arg TOOLCHAIN_ARCH_SHORT=arm64
              target: externals-linux-clang-cross
            - arch: arm
              docker: scripts/Docker/ubuntu16/gcc-cross
              gnArgs: extra_cflags+=[ \'-Wno-psabi\' ]
              alt: gcc
            - arch: arm64
              docker: scripts/Docker/ubuntu16/gcc-cross
              dockerArgs: --build-arg TOOLCHAIN_ARCH=aarch64-none-linux-gnu --build-arg FONTCONFIG_ARCH=arm64
              gnArgs: extra_cflags+=[ \'-Wno-psabi\' ]
              alt: gcc
      - template: azure-templates-bootstrapper.yml # Build Native Tizen (Linux)
        parameters:
          name: native_tizen_linux
          displayName: Tizen
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(TIZEN_LINUX_PACKAGES)
          target: externals-tizen

  - stage: native_wasm
    displayName: Native WASM
    dependsOn: prepare
    jobs:
      - template: azure-templates-wasm-matrix.yml # Build Native WASM (Linux)
        parameters:
          emscripten:
            - 1.39.11
            - 1.40.0
            - 2.0.5
            - 2.0.6
            - 2.0.9
            - 2.0.11
            - 2.0.12

  - stage: managed
    displayName: Build Managed
    dependsOn:
      - native_windows
      - native_macos
      - native_linux
      - native_wasm
    jobs:
      - template: azure-templates-bootstrapper.yml # Build Managed (Windows)
        parameters:
          name: managed_windows
          displayName: Managed (Windows)
          vmImage: $(VM_IMAGE_WINDOWS)
          target: libs
          additionalArgs: --skipExternals="all"
          requiredArtifacts:
            - native_android_x86_windows
            - native_android_x64_windows
            - native_android_arm_windows
            - native_android_arm64_windows
            - native_tizen_windows
            - native_uwp_angle_x86_windows
            - native_uwp_angle_x64_windows
            - native_uwp_angle_arm_windows
            - native_uwp_angle_arm64_windows
            - native_uwp_x86_windows
            - native_uwp_x64_windows
            - native_uwp_arm_windows
            - native_uwp_arm64_windows
            - native_win32_x86_windows
            - native_win32_x64_windows
            - native_win32_arm64_windows
            - native_win32_x64_nanoserver_windows
            - native_wasm_linux
      - template: azure-templates-bootstrapper.yml # Build Managed (macOS)
        parameters:
          name: managed_macos
          displayName: Managed (macOS)
          vmImage: $(VM_IMAGE_MAC)
          target: libs
          additionalArgs: --skipExternals="all"
          requiredArtifacts:
            - native_android_x86_macos
            - native_android_x64_macos
            - native_android_arm_macos
            - native_android_arm64_macos
            - native_ios_macos
            - native_macos_macos
            # - native_tizen_macos
            - native_tizen_windows
            - native_tvos_macos
            - native_watchos_macos
            - native_wasm_linux
      - template: azure-templates-bootstrapper.yml # Build Managed (Linux)
        parameters:
          name: managed_linux
          displayName: Managed (Linux)
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(MANAGED_LINUX_PACKAGES)
          target: libs
          additionalArgs: --skipExternals="all"
          requiredArtifacts:
            - native_linux_x64_linux
            - native_linux_arm_linux
            - native_linux_arm64_linux
            - native_linux_x64_nodeps_linux
            - native_linux_arm_nodeps_linux
            - native_linux_arm64_nodeps_linux
            - native_linux_x64_alpine_linux
            - native_linux_x64_alpine_nodeps_linux
            # - native_tizen_linux
            - native_tizen_windows
            - native_wasm_linux

  - stage: package
    displayName: Package NuGets
    dependsOn: managed
    jobs:
      - template: azure-templates-bootstrapper.yml # Package NuGets
        parameters:
          name: package_windows
          displayName: Package NuGets
          vmImage: $(VM_IMAGE_WINDOWS)
          target: nuget
          additionalArgs: --packall=true --skipbuild=true
          installWindowsSdk: false
          shouldPublish: true
          requiredArtifacts:
            - managed_linux
            - managed_macos
            - managed_windows
          postBuildSteps:
            - task: PublishBuildArtifacts@1
              displayName: Publish the native artifacts
              inputs:
                artifactName: native
                pathToPublish: 'output/native'
            - task: PublishBuildArtifacts@1
              displayName: Publish the nuget artifacts
              inputs:
                artifactName: nuget
                pathToPublish: 'output/nugets'
            - task: PublishBuildArtifacts@1
              displayName: Publish the special nuget artifacts
              inputs:
                artifactName: nuget_special
                pathToPublish: 'output/special-nugets'
            - task: PublishBuildArtifacts@1
              displayName: Publish the SignList.xml into nuget artifacts
              inputs:
                artifactName: nuget
                pathToPublish: 'SignList.xml'

  - stage: api_diff
    displayName: API Diff
    dependsOn: package
    jobs:
      - template: azure-templates-bootstrapper.yml # API Diff
        parameters:
          name: api_diff_windows
          displayName: API Diff
          vmImage: $(VM_IMAGE_WINDOWS_PREVIOUS)
          target: docs-api-diff
          additionalArgs: --nugetDiffPrerelease=$(NUGET_DIFF_PRERELEASE)
          installWindowsSdk: false
          shouldPublish: false
          requiredArtifacts:
            - package_windows
          preBuildSteps:
            - pwsh: |
                $p = "$env:BUILD_SOURCESDIRECTORY\output\nugets\api-diff"
                New-Item -ItemType Directory -Force -Path $p | Out-Null
                $uri = 'https://xamarin.azureedge.net/GTKforWindows/Windows/gtk-sharp-2.12.45.msi'
                .\scripts\download-file.ps1 -Uri $uri -OutFile gtk-sharp.msi
                msiexec /i gtk-sharp.msi /norestart /quiet /l* $p\gtk-sharp-install.log
              displayName: Install GTK# 2.12
          postBuildSteps:
            - task: PublishBuildArtifacts@1
              displayName: Publish the API diffs
              condition: always()
              inputs:
                artifactName: api-diff
                pathToPublish: '$(Build.SourcesDirectory)\output\api-diff'

  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - stage: signing
      displayName: Sign NuGets
      dependsOn: package
      condition: eq(variables['System.TeamProject'], 'devdiv')
      jobs:
        - template: sign-artifacts/jobs/v2.yml@xamarin-templates

  - stage: tests
    displayName: Tests
    dependsOn:
      - native_windows
      - native_macos
      - native_linux
      - native_wasm
    jobs:
      - template: azure-templates-bootstrapper.yml # Tests|netfx (Windows)
        parameters:
          name: tests_netfx_windows
          displayName: Windows (.NET Framework)
          vmImage: $(VM_IMAGE_WINDOWS)
          target: tests-netfx
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          installWindowsSdk: false
          shouldPublish: false
          requiredArtifacts:
            - native_win32_x86_windows
            - native_win32_x64_windows
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the .NET Framework test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                testRunTitle: 'Windows .NET Framework Tests'
      - template: azure-templates-bootstrapper.yml # Tests|netcore (Windows)
        parameters:
          name: tests_netcore_windows
          displayName: Windows (.NET Core)
          vmImage: $(VM_IMAGE_WINDOWS)
          target: tests-netcore
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          installWindowsSdk: false
          shouldPublish: false
          requiredArtifacts:
            - native_win32_x86_windows
            - native_win32_x64_windows
          tools:
            - dotnet-reportgenerator-globaltool
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the .NET Core test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                testRunTitle: 'Windows .NET Core Tests'
            - task: PublishBuildArtifacts@1
              displayName: 'Publish the code coverage results'
              inputs:
                artifactName: coverage_netcore_windows
                pathToPublish: 'output/coverage'
      - template: azure-templates-bootstrapper.yml # Tests|netfx (macOS)
        parameters:
          name: tests_netfx_macos
          displayName: macOS (.NET Framework)
          vmImage: $(VM_IMAGE_MAC)
          target: tests-netfx
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_macos_macos
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the Mono test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                testRunTitle: 'macOS Mono Tests'
      - template: azure-templates-bootstrapper.yml # Tests|netcore (macOS)
        parameters:
          name: tests_netcore_macos
          displayName: macOS (.NET Core)
          vmImage: $(VM_IMAGE_MAC)
          target: tests-netcore
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_macos_macos
          tools:
            - dotnet-reportgenerator-globaltool
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the .NET Core test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                testRunTitle: 'macOS .NET Core Tests'
            - task: PublishBuildArtifacts@1
              displayName: 'Publish the code coverage results'
              inputs:
                artifactName: coverage_netcore_macos
                pathToPublish: 'output/coverage'
      - template: azure-templates-bootstrapper.yml # Tests|android (macOS)
        parameters:
          name: tests_android_macos
          displayName: Android (macOS)
          vmImage: $(VM_IMAGE_MAC)
          target: tests-android
          additionalArgs: --device=android-emulator-32_30 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_android_x86_macos
            - native_android_x64_macos
            - native_android_arm_macos
            - native_android_arm64_macos
          preBuildSteps:
            - pwsh: |
                dotnet tool install Microsoft.DotNet.XHarness.CLI `
                  --global `
                  --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json `
                  --version "1.0.0-prerelease*"
              displayName: Install the xharness .NET Core tool
            - bash: |
                sh -c "echo \"y\" | $ANDROID_HOME/tools/bin/sdkmanager \"emulator\" \"system-images;android-30;google_apis_playstore;x86\""
                echo "##vso[task.prependpath]$ANDROID_HOME/tools/bin"
                echo "##vso[task.prependpath]$ANDROID_HOME/emulator"
              displayName: Install the Android emulator
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the Android test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'output/testlogs/SkiaSharp.Android.Tests/**/TestResults.xml'
                testRunTitle: 'Android Tests'
            - task: PublishBuildArtifacts@1
              displayName: Publish the test logs
              condition: always()
              inputs:
                artifactName: testlogs_android
                pathToPublish: 'output/testlogs'
      - template: azure-templates-bootstrapper.yml # Tests|ios (macOS)
        parameters:
          name: tests_ios_macos
          displayName: iOS (macOS)
          vmImage: $(VM_IMAGE_MAC)
          target: tests-ios
          additionalArgs: --device=ios-simulator-64 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_ios_macos
          preBuildSteps:
            - template: azure-templates-provisioning-profiles.yml
            - pwsh: |
                dotnet tool install Microsoft.DotNet.XHarness.CLI `
                  --global `
                  --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json `
                  --version "1.0.0-prerelease*"
              displayName: Install the xharness .NET Core tool
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the iOS test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'output/testlogs/SkiaSharp.iOS.Tests/**/TestResults.xml'
                testRunTitle: 'iOS Tests'
            - task: PublishBuildArtifacts@1
              displayName: Publish the test logs
              condition: always()
              inputs:
                artifactName: testlogs_ios
                pathToPublish: 'output/testlogs'
      - template: azure-templates-bootstrapper.yml # Tests|netfx (Linux)
        parameters:
          name: tests_netfx_linux
          displayName: Linux (.NET Framework)
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(MANAGED_LINUX_PACKAGES)
          target: tests-netfx
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_linux_x64_linux
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the Mono test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                testRunTitle: 'Linux Mono Tests'
      - template: azure-templates-bootstrapper.yml # Tests|netcore (Linux)
        parameters:
          name: tests_netcore_linux
          displayName: Linux (.NET Core)
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(MANAGED_LINUX_PACKAGES)
          target: tests-netcore
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
          shouldPublish: false
          requiredArtifacts:
            - native_linux_x64_linux
          tools:
            - dotnet-reportgenerator-globaltool
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the .NET Core test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                testRunTitle: 'Linux .NET Core Tests'
            - task: PublishBuildArtifacts@1
              displayName: 'Publish the code coverage results'
              inputs:
                artifactName: coverage_netcore_linux
                pathToPublish: 'output/coverage'
      - template: azure-templates-bootstrapper.yml # Tests [WASM] (Linux)
        parameters:
          name: tests_wasm_linux
          displayName: WASM (Linux)
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(MANAGED_LINUX_PACKAGES) ninja-build
          target: tests-wasm
          additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=false --chromedriver=$(CHROMEWEBDRIVER)
          shouldPublish: false
          requiredArtifacts:
            - native_wasm_linux
          installEmsdk: true
          initScript: source ~/emsdk/emsdk_env.sh
          postBuildSteps:
            - task: PublishTestResults@2
              displayName: Publish the WASM test results
              condition: always()
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: 'tests/SkiaSharp*.Wasm.Tests/**/TestResults.xml'
                testRunTitle: 'Linux WASM Tests'
      # TODO: add tests for linux alpine
      # TODO: add tests for linux no dependencies
      # TODO: add tests for windows nano server
      - job: coverage_reports                      # Coverage Reports
        displayName: Coverage Reports
        pool:
          vmImage: $(VM_IMAGE_LINUX)
        dependsOn:
          - tests_netcore_windows
          - tests_netcore_macos
          - tests_netcore_linux
        steps:
          - checkout: self
          - template: azure-templates-variables.yml
          - task: DownloadBuildArtifacts@0
            displayName: Download the coverage_netcore_windows artifact
            inputs:
              artifactName: coverage_netcore_windows
              downloadPath: output
          - task: DownloadBuildArtifacts@0
            displayName: Download the coverage_netcore_macos artifact
            inputs:
              artifactName: coverage_netcore_macos
              downloadPath: output
          - task: DownloadBuildArtifacts@0
            displayName: Download the coverage_netcore_linux artifact
            inputs:
              artifactName: coverage_netcore_linux
              downloadPath: output
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish the code coverage results'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: 'output/**/Cobertura.xml'

  - stage: samples
    displayName: Samples
    dependsOn: package
    jobs:
      - template: azure-templates-bootstrapper.yml # Build Samples (Windows)
        parameters:
          name: samples_windows
          displayName: Windows
          vmImage: $(VM_IMAGE_WINDOWS)
          target: samples
          installWindowsSdk: false
          requiredArtifacts:
            - nuget
          preBuildSteps:
            - pwsh: |
                New-Item '.\output\nugets\' -Type Directory -Force | Out-Null
                Get-ChildItem '.\output\*.nupkg' | Move-Item -Destination '.\output\nugets\'
              displayName: Copy the *.nupkgs into the correct folder for the samples
      - template: azure-templates-bootstrapper.yml # Build Samples (macOS)
        parameters:
          name: samples_macos
          displayName: macOS
          vmImage: $(VM_IMAGE_MAC)
          target: samples
          requiredArtifacts:
            - nuget
          preBuildSteps:
            - template: azure-templates-provisioning-profiles.yml
            - pwsh: |
                New-Item '.\output\nugets\' -Type Directory -Force | Out-Null
                Get-ChildItem '.\output\*.nupkg' | Move-Item -Destination '.\output\nugets\'
              displayName: Copy the *.nupkgs into the correct folder for the samples
      - template: azure-templates-bootstrapper.yml # Build Samples (Linux)
        parameters:
          name: samples_linux
          displayName: Linux
          vmImage: $(VM_IMAGE_LINUX)
          packages: $(MANAGED_LINUX_PACKAGES)
          target: samples
          requiredArtifacts:
            - nuget
          installEmsdk: true
          initScript: source ~/emsdk/emsdk_env.sh
          preBuildSteps:
            - pwsh: |
                New-Item '.\output\nugets\' -Type Directory -Force | Out-Null
                Get-ChildItem '.\output\*.nupkg' | Move-Item -Destination '.\output\nugets\'
              displayName: Copy the *.nupkgs into the correct folder for the samples

  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - stage: checks
      displayName: Run Code Checks
      dependsOn: prepare
      jobs:
        - template: azure-templates-bootstrapper.yml # Run Code Checks
          parameters:
            name: native_checks_windows
            displayName: Run Code Checks
            condition: and(always(), eq('refs/heads/main', variables['Build.SourceBranch']))
            vmImage: $(VM_IMAGE_WINDOWS_PREVIOUS)
            target: git-sync-deps
            installWindowsSdk: false
            shouldPublish: false
            postBuildSteps:
              - task: CredScan@2
                displayName: Analyze source for credentials
                condition: always()
                inputs:
                  toolMajorVersion: 'V2'
              - task: PoliCheck@1
                displayName: Run PoliCheck
                condition: always()
                inputs:
                  inputType: 'Basic'
                  targetType: 'F'
              - task: SdtReport@1
                displayName: Create security analysis report
                condition: always()
                inputs:
                  AllTools: false
                  APIScan: false
                  BinSkim: false
                  CodesignValidation: false
                  CredScan: true
                  FortifySCA: false
                  FxCop: false
                  ModernCop: false
                  MSRD: false
                  PoliCheck: true
                  RoslynAnalyzers: false
                  SDLNativeRules: false
                  Semmle: false
                  TSLint: false
                  ToolLogsNotFoundAction: 'Standard'
              - task: PublishSecurityAnalysisLogs@3
                displayName: Publish security analysis logs
                condition: always()
              - task: TSAUpload@1
                displayName: Publish TSA logs
                condition: always()
                continueOnError: true
                inputs:
                  tsaVersion: 'TsaV2'
                  codebase: 'NewOrUpdate'
                  tsaEnvironment: 'PROD'
                  codeBaseName: 'SkiaSharp_main'
                  notificationAlias: 'xamacomd@microsoft.com'
                  notifyAlwaysV2: false
                  instanceUrlForTsaV2: 'DEVDIV'
                  projectNameDEVDIV: 'DevDiv'
                  areaPath: 'DevDiv\Xamarin SDK\SkiaSharp'
                  iterationPath: 'DevDiv\OneVS'
                  uploadAPIScan: false
                  uploadBinSkim: false
                  uploadCredScan: true
                  uploadFortifySCA: false
                  uploadFxCop: false
                  uploadModernCop: false
                  uploadPoliCheck: true
                  uploadPREfast: false
                  uploadRoslyn: false
                  uploadTSLint: false
                  uploadAsync: true
