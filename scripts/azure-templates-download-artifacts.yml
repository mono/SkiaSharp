parameters:
  sourceBuildId: ''
  artifacts: [ ] # name, dir

steps:
  - pwsh: |
      $buildId = "${{ parameters.sourceBuildId }}"
      if ($env:RESOURCES_PIPELINE_SKIASHARP_RUNID) {
        $buildId = $env:RESOURCES_PIPELINE_SKIASHARP_RUNID
        Write-Host "Using RESOURCES_PIPELINE_SKIASHARP_RUNID = '$env:RESOURCES_PIPELINE_SKIASHARP_RUNID'"
      }
      if (-not $buildId) {
        $buildId = $env:BUILD_BUILDID
        Write-Host "Using BUILD_BUILDID = '$env:BUILD_BUILDID'"
      }
      $pipelineId = "$env:SYSTEM_DEFINITIONID"
      if ($env:RESOURCES_PIPELINE_SKIASHARP_PIPELINEID) {
        $pipelineId = $env:RESOURCES_PIPELINE_SKIASHARP_PIPELINEID
        Write-Host "Using RESOURCES_PIPELINE_SKIASHARP_PIPELINEID = '$env:RESOURCES_PIPELINE_SKIASHARP_PIPELINEID'"
      }
      Write-Host "DOWNLOAD_BUILD_ID = '$buildId'"
      Write-Host "DOWNLOAD_PIPELINE_ID = '$pipelineId'"
      Write-Host "##vso[task.setvariable variable=DOWNLOAD_BUILD_ID]$buildId"
      Write-Host "##vso[task.setvariable variable=DOWNLOAD_PIPELINE_ID]$pipelineId"
    displayName: Ensure all the variables are set for the download

  - ${{ each artifact in parameters.artifacts }}:
    - task: DownloadBuildArtifacts@0
      displayName: Download the pre-built ${{ artifact.name }} artifacts
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: '$(DOWNLOAD_PIPELINE_ID)'
        buildVersionToDownload: 'specific'
        buildId: '$(DOWNLOAD_BUILD_ID)'
        downloadType: 'single'
        artifactName: ${{ artifact.name }}
        downloadPath: 'download-temp'

    - pwsh: |
        New-Item '.\output\${{ artifact.dir }}\' -Type Directory -Force | Out-Null
        Get-ChildItem '.\download-temp\${{ artifact.name }}\' | Copy-Item -Destination '.\output\${{ artifact.dir }}\' -Recurse -Force
        Remove-Item '.\download-temp\${{ artifact.name }}\' -Recurse -Force
      displayName: Move the ${{ artifact.name }} artifacts to the ./output/${{ artifact.dir }} directory

    - pwsh: Remove-Item ./output/logs/ -Recurse -Force -ErrorAction Ignore
      displayName: Delete old logs
