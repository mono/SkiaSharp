parameters:
  name: ''                                      # in the form type_platform_host
  displayName: ''                               # the human name
  vmImage: ''                                   # the VM image
  packages: ''                                  # any additional packages
  target: ''                                    # the bootstrapper target
  dependsOn: []                                 # the dependiencies
  requiredArtifacts: []                         # the artifacts that this build needs to download
  demands: []                                   # the demands
  preBuildSteps: []                             # any steps to run before the build
  postBuildSteps: []                            # any additional steps to run after the build
  additionalArgs: ''                            # any additional arguments to pass to the bootstrapper
  retryCount: 1                                 # the number of times to retry the bootstrapper
  condition: succeeded()                        # whether or not to run this template
  shouldPublish: true                           # whether or not to publish the artifacts
  configuration: $(CONFIGURATION)               # the build configuration
  buildExternals: $(DOWNLOAD_EXTERNALS)         # the build number to download externals from
  verbosity: $(VERBOSITY)                       # the level of verbosity to use when building

jobs:
# - ${{ if and(ne(parameters.buildExternals, ''), startsWith(parameters.name, 'native_')) }}:
#   - template: azure-templates-download.yml
#     parameters:
#       name: ${{ parameters.name }}
#       displayName: ${{ parameters.displayName }}
#       vmImage: ${{ parameters.vmImage }}
#       condition: ${{ parameters.condition }}

# - ${{ if or(eq(parameters.buildExternals, ''), not(startsWith(parameters.name, 'native_'))) }}:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
      demands: ${{ parameters.demands }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    steps:
      - checkout: self
        submodules: recursive
      - pwsh: |
          if ($env:GIT_BRANCH_NAME.StartsWith($env:FEATURE_NAME_PREFIX)) {
            $feature = $env:GIT_BRANCH_NAME.Substring($env:FEATURE_NAME_PREFIX.Length)
            Write-Host "##vso[task.setvariable variable=FEATURE_NAME]$feature"
          }
        displayName: Determine the feature name, if any
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=PREVIEW_LABEL]pr"
        displayName: Use a special preview label for PRs
        condition: eq(variables['Build.Reason'], 'PullRequest')
      # install any packages on linux
      - ${{ if endsWith(parameters.name, '_linux') }}:
        - bash: |
            sudo apt remove -y mono-complete msbuild
            sudo apt autoremove -y
            sudo rm /etc/mono/config
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
            echo "deb https://download.mono-project.com/repo/ubuntu $(MONO_VERSION_LINUX) main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
            sudo apt update
            sudo apt install -y ${{ parameters.packages }}
          displayName: Install any package dependencies
      # install tizen
      - ${{ if contains(parameters.name, '_tizen_') }}:
        - pwsh: .\scripts\install-openjdk.ps1
          displayName: Install the OpenJDK
        - pwsh: .\scripts\install-tizen.ps1
          displayName: Install the Tizen SDK
      # install extra bits for the native builds
      - ${{ if startsWith(parameters.name, 'native_') }}:
        # switch to Python 2.7
        - task: UsePythonVersion@0
          displayName: Switch to Python to 2.7
          inputs:
            versionSpec: '2.7'
            architecture: 'x64'
        # install android ndk
        - ${{ if contains(parameters.name, '_android_') }}:
          - pwsh: .\scripts\install-android-ndk.ps1
            displayName: Install the Android NDK
        # install llvm
        - ${{ if endsWith(parameters.name, '_windows') }}:
          - pwsh: .\scripts\install-llvm.ps1
            displayName: Install LLVM
      # install extra bits for the manged builds
      - ${{ if not(startsWith(parameters.name, 'native_')) }}:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: $(DOTNET_VERSION)
            performMultiLevelLookup: true
          displayName: Install the correct version of .NET Core
      # switch to the correct mono version on mac
      - ${{ if endsWith(parameters.name, '_macos') }}:
        - bash: sudo $(Agent.HomeDirectory)/scripts/select-xamarin-sdk.sh $(MONO_VERSION_MACOS)
          displayName: Switch to the latest Xamarin SDK
        - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XCODE_VERSION).app;sudo xcode-select --switch /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
          displayName: Switch to the latest Xcode
      # download artifacts
      - ${{ each dep in parameters.requiredArtifacts }}:
        - task: DownloadBuildArtifacts@0
          displayName: Download the ${{ dep }} artifacts
          inputs:
            artifactName: ${{ dep }}
            downloadPath: 'download-temp'
        - pwsh: |
            New-Item '.\output\' -Type Directory -Force | Out-Null
            Get-ChildItem '.\download-temp\${{ dep }}\' | Copy-Item -Destination '.\output\' -Recurse -Force
            Remove-Item '.\download-temp\${{ dep }}\' -Recurse -Force
          displayName: Move the ${{ dep }} artifacts to the output directory
      # pre-build steps
      - ${{ parameters.preBuildSteps }}
      # build
      - ${{ if endsWith(parameters.name, '_windows') }}:
        - pwsh: .\scripts\retry-command.ps1 -RetryCount ${{ parameters.retryCount }} { .\bootstrapper.ps1 -t ${{ parameters.target }} -v ${{ parameters.verbosity }} -c ${{ coalesce(parameters.configuration, 'Release') }} ${{ parameters.additionalArgs }} }
          env:
            JavaSdkDirectory: $(JAVA_HOME)
            LLVM_HOME: $(LLVM_HOME)
          displayName: Run the bootstrapper for ${{ parameters.target }}
      - ${{ if not(endsWith(parameters.name, '_windows')) }}:
        - bash: ./scripts/retry-command.sh ${{ parameters.retryCount }} ./bootstrapper.sh -t ${{ parameters.target }} -v ${{ parameters.verbosity }} -c ${{ coalesce(parameters.configuration, 'Release') }} ${{ parameters.additionalArgs }}
          env:
            JavaSdkDirectory: $(JAVA_HOME)
          displayName: Run the bootstrapper for ${{ parameters.target }}
      # post-build steps
      - ${{ parameters.postBuildSteps }}
      # publish artifacts
      - task: PublishBuildArtifacts@1
        displayName: Publish the ${{ parameters.name }} artifacts
        condition: ${{ parameters.shouldPublish }}
        inputs:
          artifactName: ${{ parameters.name }}
          pathToPublish: 'output'
