parameters:
  - name: buildPipelineType
    type: string
    default: 'both'
  - name: buildExternals
    type: string
    default: 'latest'
  - name: VM_IMAGE_HOST
    type: object
  - name: VM_IMAGE_WINDOWS
    type: object
  - name: VM_IMAGE_WINDOWS_NATIVE
    type: object
  - name: VM_IMAGE_MAC
    type: object
  - name: VM_IMAGE_MAC_NATIVE
    type: object
  - name: VM_IMAGE_LINUX
    type: object
  - name: VM_IMAGE_LINUX_NATIVE
    type: object
  - name: sdl
    type: object
    default:
      apiscan:
        enabled: false
      binskim:
        break: false
      spotBugs:
        enabled: false
  - name: use1ESPipelineTemplates
    type: boolean
    default: false
  - name: enableSigning
    type: boolean
    default: false
  - name: forceRealSigning
    type: boolean
    default: false

stages:
  - stage: prepare
    displayName: Prepare Build
    jobs:
      - job: prepare                               # Prepare Build
        displayName: Prepare Build
        pool: ${{ parameters.VM_IMAGE_HOST.pool }}
        steps:
          - checkout: none
          - template: /scripts/azure-templates-variables.yml@self
            parameters:
              updateBuild: true
          - ${{ if eq(parameters.buildPipelineType, 'build') }}:
            - template: /scripts/azure-templates-github-status.yml@self
              parameters:
                context: 'SkiaSharp-Tests'
                state: 'pending'
                displayName: Queue up the status for the tests pipeline
          - ${{ if eq(parameters.buildPipelineType, 'tests') }}:
            - template: /scripts/azure-templates-github-status.yml@self

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_windows
      displayName: Native Windows
      dependsOn: prepare
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|x86 (Win)
          parameters:
            name: native_android_x86_windows
            displayName: Android x86
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x86
            installWindowsSdk: false
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|x64 (Win)
          parameters:
            name: native_android_x64_windows
            displayName: Android x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x64
            installWindowsSdk: false
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|arm (Win)
          parameters:
            name: native_android_arm_windows
            displayName: Android arm
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm
            installWindowsSdk: false
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|arm64 (Win)
          parameters:
            name: native_android_arm64_windows
            displayName: Android arm64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm64
            installWindowsSdk: false
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Tizen (Win)
          parameters:
            name: native_tizen_windows
            displayName: Tizen
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-tizen
            installWindowsSdk: false
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build ANGLE UWP|x86 (Win)
          parameters:
            name: native_uwp_angle_x86_windows
            displayName: ANGLE x86
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=x86
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build ANGLE UWP|x64 (Win)
          parameters:
            name: native_uwp_angle_x64_windows
            displayName: ANGLE x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=x64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build ANGLE UWP|arm (Win)
          parameters:
            name: native_uwp_angle_arm_windows
            displayName: ANGLE arm
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build ANGLE UWP|arm64 (Win)
          parameters:
            name: native_uwp_angle_arm64_windows
            displayName: ANGLE arm64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native UWP|x86 (Win)
          parameters:
            name: native_uwp_x86_windows
            displayName: UWP x86
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=x86 --skipAngle=true
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native UWP|x64 (Win)
          parameters:
            name: native_uwp_x64_windows
            displayName: UWP x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=x64 --skipAngle=true
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native UWP|arm (Win)
          parameters:
            name: native_uwp_arm_windows
            displayName: UWP arm
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=arm --skipAngle=true
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native UWP|arm64 (Win)
          parameters:
            name: native_uwp_arm64_windows
            displayName: UWP arm64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=arm64 --skipAngle=true
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Win32|x86 (Win)
          parameters:
            name: native_win32_x86_windows
            displayName: Win32 x86
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=x86
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Win32|x64 (Win)
          parameters:
            name: native_win32_x64_windows
            displayName: Win32 x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=x64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Win32|arm64 (Win)
          parameters:
            name: native_win32_arm64_windows
            displayName: Win32 arm64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=arm64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native NanoServer|x64 (Win)
          parameters:
            name: native_win32_x64_nanoserver_windows
            displayName: Nano Server x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-nanoserver
            additionalArgs: --buildarch=x64

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_macos
      displayName: Native macOS
      dependsOn: prepare
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|x86 (macOS)
          parameters:
            name: native_android_x86_macos
            displayName: Android x86
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x86
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|x64 (macOS)
          parameters:
            name: native_android_x64_macos
            displayName: Android x64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|arm (macOS)
          parameters:
            name: native_android_arm_macos
            displayName: Android arm
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Android|arm64 (macOS)
          parameters:
            name: native_android_arm64_macos
            displayName: Android arm64
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm64
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native iOS (macOS)
          parameters:
            name: native_ios_macos
            displayName: iOS
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-ios
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Mac Catalyst (macOS)
          parameters:
            name: native_maccatalyst_macos
            displayName: Mac Catalyst
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-maccatalyst
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native macOS (macOS)
          parameters:
            name: native_macos_macos
            displayName: macOS
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-macos
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native tvOS (macOS)
          parameters:
            name: native_tvos_macos
            displayName: tvOS
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-tvos
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native watchOS (macOS)
          parameters:
            name: native_watchos_macos
            displayName: watchOS
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-watchos
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Tizen (macOS)
          parameters:
            name: native_tizen_macos
            displayName: Tizen
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-tizen
            condition: false # TODO: TIZEN INSTALL BUGS

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_linux
      displayName: Native Linux
      dependsOn: prepare
      jobs:
        - template: /scripts/azure-templates-linux-matrix.yml@self # Build Native Linux (Linux)
          parameters:
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            use1ESPipelineTemplates: ${{ parameters.use1ESPipelineTemplates }}
            builds:
              - name: ''
              - name: nodeps
                desc: 'No Deps'
                additionalArgs: --verifyExcluded=fontconfig
                gnArgs: skia_use_fontconfig=false
            matrix:
              - arch: x64
                docker: scripts/Docker/debian9/amd64
              - arch: x64
                variant: alpine
                docker: scripts/Docker/alpine/amd64
              - arch: arm
                docker: scripts/Docker/debian9/clang-cross
                target: externals-linux-clang-cross
              - arch: arm64
                docker: scripts/Docker/debian9/clang-cross
                dockerArgs: --build-arg TOOLCHAIN_ARCH=aarch64-linux-gnu --build-arg TOOLCHAIN_ARCH_SHORT=arm64
                target: externals-linux-clang-cross
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Native Tizen (Linux)
          parameters:
            name: native_tizen_linux
            displayName: Tizen
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            packages: $(TIZEN_LINUX_PACKAGES)
            target: externals-tizen

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_wasm
      displayName: Native WASM
      dependsOn: prepare
      jobs:
        - template: /scripts/azure-templates-wasm-matrix.yml@self # Build Native WASM (Linux)
          parameters:
            sdl: ${{ parameters.sdl }}
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            use1ESPipelineTemplates: ${{ parameters.use1ESPipelineTemplates }}
            emscripten:
              - 2.0.6:
                displayName: 2.0.6
                version: 2.0.6
                features: none
              - 2.0.23:
                displayName: 2.0.23
                version: 2.0.23
                features: none

              # .NET 6
              - 3.1.7:
                displayName: 3.1.7
                version: 3.1.7
                features: none

              # .NET 7
              - 3.1.12:
                displayName: 3.1.12
                version: 3.1.12
                features: st
              - 3.1.12:
                displayName: '3.1.12_SIMD'
                version: 3.1.12
                features: simd
              - 3.1.12:
                displayName: '3.1.12_Threading'
                version: 3.1.12
                features: mt
              - 3.1.12:
                displayName: '3.1.12_Threading_SIMD'
                version: 3.1.12
                features: mt,simd

              # .NET 8
              - 3.1.34:
                displayName: 3.1.34
                version: 3.1.34
                features: _wasmeh,st
              - 3.1.34:
                displayName: '3.1.34_Threading'
                version: 3.1.34
                features: _wasmeh,mt
              - 3.1.34:
                displayName: '3.1.34_SIMD'
                version: 3.1.34
                features: _wasmeh,simd,st
              - 3.1.34:
                displayName: '3.1.34_SIMD_Threading'
                version: 3.1.34
                features: _wasmeh,simd,mt
                
              # .NET 9
              - 3.1.56:
                displayName: 3.1.56
                version: 3.1.56
                features: _wasmeh,st
              - 3.1.56:
                displayName: '3.1.56_Threading'
                version: 3.1.56
                features: _wasmeh,mt
              - 3.1.56:
                displayName: '3.1.56_SIMD'
                version: 3.1.56
                features: _wasmeh,simd,st
              - 3.1.56:
                displayName: '3.1.56_SIMD_Threading'
                version: 3.1.56
                features: _wasmeh,simd,mt

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native
      displayName: Native
      variables:
        nativeLinuxJobs: $[ convertToJson(stageDependencies.native_linux) ]
        nativeWasmJobs: $[ convertToJson(stageDependencies.native_wasm) ]
      dependsOn:
        - native_windows
        - native_macos
        - native_linux
        - native_wasm
      jobs:
        - template: /scripts/azure-templates-merger.yml@self # Merge Native Artifacts
          parameters:
            name: native
            displayName: Merge Native Artifacts
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_HOST }}
            requiredArtifacts:
              # Android
              - name: native_android_x86_windows
              - name: native_android_x64_windows
              - name: native_android_arm_windows
              - name: native_android_arm64_windows
              # Tizen
              - name: native_tizen_windows
              # UWP
              - name: native_uwp_angle_x86_windows
              - name: native_uwp_angle_x64_windows
              - name: native_uwp_angle_arm_windows
              - name: native_uwp_angle_arm64_windows
              - name: native_uwp_x86_windows
              - name: native_uwp_x64_windows
              - name: native_uwp_arm_windows
              - name: native_uwp_arm64_windows
              # Win32
              - name: native_win32_x86_windows
              - name: native_win32_x64_windows
              - name: native_win32_arm64_windows
              # Nano Server
              - name: native_win32_x64_nanoserver_windows
              # iOS
              - name: native_ios_macos
              # Mac Catalyst
              - name: native_maccatalyst_macos
              # macOS
              - name: native_macos_macos
              # tvOS
              - name: native_tvos_macos
              # tvOS
              - name: native_watchos_macos
            matrixArtifacts:
              - name: native_linux
                jobs: $(nativeLinuxJobs)
              - name: native_wasm
                jobs: $(nativeWasmJobs)
        - template: /scripts/azure-templates-merger.yml@self # Merge Native WASM Artifacts
          parameters:
            name: native_wasm_linux
            displayName: Merge Native WASM Artifacts
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_HOST }}
            matrixArtifacts:
              - name: native_wasm
                jobs: $(nativeWasmJobs)

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: managed
      displayName: Build Managed
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: native
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Managed .NET Framework (Windows)
          parameters:
            name: managed_netfx_windows
            displayName: Managed .NET Framework (Windows)
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: libs
            additionalArgs: --skipExternals="all" --solutionType=netfx
            installPreviewVs: true
            requiredArtifacts:
              - name: native
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Managed .NET (Windows)
          parameters:
            name: managed_net_windows
            displayName: Managed .NET (Windows)
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: libs
            additionalArgs: --skipExternals="all" --solutionType=net
            installPreviewVs: true
            requiredArtifacts:
              - name: native
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Managed (macOS)
          parameters:
            name: managed_macos
            displayName: Managed (macOS)
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: libs
            additionalArgs: --skipExternals="all"
            requiredArtifacts:
              - name: native
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Managed (Linux)
          parameters:
            name: managed_linux
            displayName: Managed (Linux)
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: libs
            additionalArgs: --skipExternals="all"
            requiredArtifacts:
              - name: native
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: /scripts/azure-templates-merger.yml@self       # Merge Managed Artifacts
          parameters:
            name: managed
            displayName: Merge Managed Artifacts
            sdl: ${{ parameters.sdl }}
            dependsOn:
              - managed_netfx_windows
              - managed_net_windows
              - managed_macos
              - managed_linux
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_HOST }}
            requiredArtifacts:
              - name: managed_netfx_windows
              - name: managed_net_windows
              - name: managed_macos
              - name: managed_linux

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: package
      displayName: Package NuGets
      dependsOn: managed
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Package NuGets
          parameters:
            name: package_windows
            displayName: Package NuGets
            sdl: ${{ parameters.sdl }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: nuget
            additionalArgs: --packall=true --skipbuild=true
            shouldPublish: false
            installWindowsSdk: false
            installAndroidSdk: false
            installDotNet: false
            requiredArtifacts:
              - name: managed
              - name: native
            postBuildSteps:
              - pwsh: |
                  Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                  Move-Item -Path '.\output\' -Destination '$(Build.ArtifactStagingDirectory)\output\'
                  New-Item '.\output\' -Type Directory -Force | Out-Null
                displayName: Re-organize the output folder for publishing
              - pwsh: |
                  Move-Item -Path '$(Build.ArtifactStagingDirectory)\output\nugets\' -Destination '.\output\'
                  Copy-Item -Path '.\scripts\SignList.xml' -Destination '.\output\nugets\'
                displayName: Prepare the nugets artifact for publishing
              - pwsh: |
                  Move-Item -Path '$(Build.ArtifactStagingDirectory)\output\nugets-symbols\' -Destination '.\output\'
                displayName: Prepare the nugets-symbols artifact for publishing
              - pwsh: |
                  $nupkgs = (Get-ChildItem ".\output\nugets*\*.*nupkg")
                  foreach ($nupkg in $nupkgs) {
                    $filename = $nupkg.Name.TrimEnd('.nupkg')
                    $dest = ".\output\extracted_nugets\$filename"
                    Write-Host "Extracting '$nupkg' to '$dest'..."
                    Expand-Archive $nupkg $dest
                  }
                displayName: Extract all the .nupkg files for scanning
              - pwsh: |
                  Move-Item -Path '$(Build.ArtifactStagingDirectory)\output\nugets-special\' -Destination '.\output\'
                displayName: Prepare the nugets-special artifact for publishing
              - pwsh: |
                  Move-Item -Path '$(Build.ArtifactStagingDirectory)\output\' -Destination '.\output\'
                displayName: Prepare the build artifact for publishing
            publishArtifacts:
              - name: package_windows
                path: '.\output\output\'
              - name: nuget
                path: '.\output\nugets'
              - name: nuget_special
                path: '.\output\nugets-special'
              - name: nuget_symbols
                path: '.\output\nugets-symbols'

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: api_diff
      displayName: API Diff
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: package
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # API Diff
          parameters:
            name: api_diff_windows
            displayName: API Diff
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: docs-api-diff
            additionalArgs: --nugetDiffPrerelease=$(NUGET_DIFF_PRERELEASE)
            shouldPublish: false
            requiredArtifacts:
              - name: package_windows
              - name: nuget
                dir: nugets
            preBuildSteps:
              - pwsh: .\scripts\install-gtk.ps1
                displayName: Install GTK# 2.12
            publishArtifacts:
              - name: api-diff
                always: true
                path: '$(Build.SourcesDirectory)\output\api-diff'

  - ${{ if eq(parameters.enableSigning, 'true') }}:
    - stage: signing
      displayName: Sign NuGets
      dependsOn: package
      jobs:
        - template: sign-artifacts/jobs/v3.yml@xamarin-templates
          parameters:
            ${{ if or(eq(parameters.forceRealSigning, 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
              signType: 'Real'
            ${{ else }}:
              signType: 'Test'
            use1ESTemplate: ${{ parameters.use1ESPipelineTemplates }}
            usePipelineArtifactTasks: true

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: tests
      displayName: Tests
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: native
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netfx (Windows)
          parameters:
            name: tests_netfx_windows
            displayName: Windows (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            installPreviewVs: true
            installWindowsSdk: false
            shouldPublish: false
            requiredArtifacts:
              - name: native_win32_x86_windows
              - name: native_win32_x64_windows
              - name: native_win32_arm64_windows
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Framework test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'Windows .NET Framework Tests'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netcore (Windows)
          parameters:
            name: tests_netcore_windows
            displayName: Windows (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            installWindowsSdk: false
            shouldPublish: false
            requiredArtifacts:
              - name: native_win32_x86_windows
              - name: native_win32_x64_windows
              - name: native_win32_arm64_windows
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'Windows .NET Core Tests'
            publishArtifacts:
              - name: coverage_netcore_windows
                path: 'output/coverage'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netfx (macOS)
          parameters:
            name: tests_netfx_macos
            displayName: macOS (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_macos_macos
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Mono test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'macOS Mono Tests'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netcore (macOS)
          parameters:
            name: tests_netcore_macos
            displayName: macOS (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_macos_macos
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'macOS .NET Core Tests'
            publishArtifacts:
              - name: coverage_netcore_macos
                path: 'output/coverage'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|android (macOS)
          parameters:
            name: tests_android_macos
            displayName: Android (macOS)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-android
            additionalArgs: --device=android-emulator-64_30 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_android_x86_macos
              - name: native_android_x64_macos
              - name: native_android_arm_macos
              - name: native_android_arm64_macos
            preBuildSteps:
              - pwsh: .\scripts\install-android-package.ps1 -Package "emulator"
                displayName: Install the Android emulator
              - pwsh: .\scripts\install-android-package.ps1 -Package "system-images;android-30;google_apis_playstore;x86_64"
                displayName: Install the Android API 30 emulator image
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Android test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'output/logs/testlogs/SkiaSharp.Android.Tests/**/TestResults.xml'
                  testRunTitle: 'Android Tests'
            publishArtifacts:
              - name: testlogs_android
                always: true
                path: 'output/logs/testlogs'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|ios (macOS)
          parameters:
            name: tests_ios_macos
            displayName: iOS (macOS)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-ios
            additionalArgs: --device=ios-simulator-64 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_ios_macos
            preBuildSteps:
              - template: /scripts/azure-templates-provisioning-profiles.yml@self
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the iOS test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'output/logs/testlogs/SkiaSharp.iOS.Tests/**/TestResults.xml'
                  testRunTitle: 'iOS Tests'
            publishArtifacts:
              - name: testlogs_ios
                always: true
                path: 'output/logs/testlogs'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netfx (Linux)
          parameters:
            name: tests_netfx_linux
            displayName: Linux (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_linux_x64_linux
              - name: native_linux_arm64_linux
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Mono test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux Mono Tests'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests|netcore (Linux)
          parameters:
            name: tests_netcore_linux
            displayName: Linux (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_linux_x64_linux
              - name: native_linux_arm64_linux
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux .NET Core Tests'
            publishArtifacts:
              - name: coverage_netcore_linux
                path: 'output/coverage'
        - template: /scripts/azure-templates-bootstrapper.yml@self # Tests [WASM] (Linux)
          parameters:
            name: tests_wasm_linux
            displayName: WASM (Linux)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES) ninja-build
            target: tests-wasm
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=false --chromedriver=$(CHROMEWEBDRIVER)
            shouldPublish: false
            requiredArtifacts:
              - name: native_wasm_linux
            installEmsdk: true
            initScript: source ~/emsdk/emsdk_env.sh
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the WASM test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Wasm.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux WASM Tests'
        # TODO: add tests for linux alpine
        # TODO: add tests for linux no dependencies
        # TODO: add tests for windows nano server
        - job: coverage_reports                      # Coverage Reports
          displayName: Coverage Reports
          pool: ${{ parameters.VM_IMAGE_HOST.pool }}
          dependsOn:
            - tests_netcore_windows
            - tests_netcore_macos
            - tests_netcore_linux
          steps:
            - checkout: self
            - template: /scripts/azure-templates-variables.yml@self
            - ${{ if ne(parameters.buildPipelineType, 'both') }}:
              - template: /scripts/azure-templates-github-status.yml@self
                parameters:
                  state: 'pending'
            - task: DownloadBuildArtifacts@1
              displayName: Download the coverage_netcore_windows artifact
              inputs:
                artifactName: coverage_netcore_windows
                downloadPath: output
            - task: DownloadBuildArtifacts@1
              displayName: Download the coverage_netcore_macos artifact
              inputs:
                artifactName: coverage_netcore_macos
                downloadPath: output
            - task: DownloadBuildArtifacts@1
              displayName: Download the coverage_netcore_linux artifact
              inputs:
                artifactName: coverage_netcore_linux
                downloadPath: output
            - task: PublishCodeCoverageResults@1
              displayName: 'Publish the code coverage results'
              inputs:
                codeCoverageTool: Cobertura
                summaryFileLocation: 'output/**/Cobertura.xml'
            - ${{ if ne(parameters.buildPipelineType, 'both') }}:
              - template: /scripts/azure-templates-github-status.yml@self

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: samples
      displayName: Samples
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: package
      jobs:
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Samples (Windows)
          parameters:
            name: samples_windows
            displayName: Windows
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: samples
            installPreviewVs: true
            requiredArtifacts:
              - name: nuget
                dir: nugets
            postBuildSteps:
              - pwsh: Remove-Item ./output/nugets/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the nugets folder
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Samples (macOS)
          parameters:
            name: samples_macos
            displayName: macOS
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: samples
            shouldPublish: false
            requiredArtifacts:
              - name: nuget
                dir: nugets
            preBuildSteps:
              - template: /scripts/azure-templates-provisioning-profiles.yml@self
        - template: /scripts/azure-templates-bootstrapper.yml@self # Build Samples (Linux)
          parameters:
            name: samples_linux
            displayName: Linux
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: samples
            shouldPublish: false
            requiredArtifacts:
              - name: nuget
                dir: nugets
            installEmsdk: true
            initScript: source ~/emsdk/emsdk_env.sh

  - ${{ if eq(parameters.sdl.apiscan.enabled, 'true') }}:
    - template: security/apiscan/v0.yml@xamarin-templates
      parameters:
        stageDependsOn:
          - package
        timeoutInMinutes: 480
        windowsPoolName: ${{ parameters.VM_IMAGE_HOST.pool.name }}
        windowsImageOverride: ${{ parameters.VM_IMAGE_HOST.pool.image }}
        scanArtifacts:
          - nuget
          - nuget_symbols
        apiScanSoftwareName: 'SkiaSharp'
        apiScanSoftwareVersionNum: $(SKIASHARP_MAJOR_VERSION)
        apiScanPreserveLogsFolder: true
        apiScanAuthConnectionString: 'runAs=App;AppId=$(ApiScanClientId)'
        apiScanSurrogateConfigurationFolder: $(Build.ArtifactStagingDirectory)\APIScanSurrogates
        preScanSteps:
          - pwsh: |
              $nupkgs = (Get-ChildItem "$(Build.ArtifactStagingDirectory)\binaries-to-scan\*\*.*nupkg")
              foreach ($nupkg in $nupkgs) {
                $filename = $nupkg.Name.TrimEnd('.nupkg')
                $dest = "$(Build.ArtifactStagingDirectory)\binaries-to-scan\nuget_symbols-extracted\$filename"
                Write-Host "Extracting '$nupkg' to '$dest'..."
                Expand-Archive $nupkg $dest
                Remove-Item $nupkg
              }
            displayName: Extract all the .nupkg files
          - pwsh: |
              $softwareFolder = "$(Build.ArtifactStagingDirectory)\binaries-to-scan"
              $surrogateFile = "$(Build.SourcesDirectory)\scripts\guardian\APIScanSurrogates.in.xml"
              $destFolder = "$(Build.ArtifactStagingDirectory)\APIScanSurrogates"
              $destFile = "$destFolder\APIScanSurrogates.xml"
              New-Item -ItemType Directory -Force -Path $destFolder | Out-Null
              $surrogateContents = (Get-Content $surrogateFile)
              $surrogateContents = $surrogateContents.Replace("{SOFTWARE_FOLDER}", $softwareFolder)
              $nuspecs = (Get-ChildItem "$(Build.ArtifactStagingDirectory)\binaries-to-scan\nuget_symbols-extracted\*\*.nuspec")
              foreach ($nuspec in $nuspecs) {
                [xml] $nuspecContent = (Get-Content $nuspec)
                $nuspecId = $nuspecContent.package.metadata.id
                $nuspecVersion = $nuspecContent.package.metadata.version
                $surrogateContents = $surrogateContents.Replace("{$nuspecId}", "$nuspecId.$nuspecVersion", 'InvariantCultureIgnoreCase')
              }
              $surrogateContents | Set-Content $destFile
            displayName: Generate the surrogate files

  - ${{ if eq(parameters.buildPipelineType, 'tests') }}:
    - stage: finalize
      displayName: Finalize Build
      dependsOn:
        - api_diff
        - samples
        - tests
      jobs:
        - job: finalize                              # Finalize Build
          displayName: Finalize Build
          pool: ${{ parameters.VM_IMAGE_HOST.pool }}
          steps:
            - checkout: none
            - template: /scripts/azure-templates-variables.yml@self
            - template: /scripts/azure-templates-github-status.yml@self
              parameters:
                context: 'SkiaSharp-Tests'
                displayName: Update the final status for the tests pipeline
