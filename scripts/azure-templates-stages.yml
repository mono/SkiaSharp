parameters:
  - name: buildPipelineType
    type: string
    default: 'both'
  - name: buildExternals
    type: string
    default: 'latest'
  - name: VM_IMAGE_HOST
    type: object
  - name: VM_IMAGE_WINDOWS
    type: object
  - name: VM_IMAGE_WINDOWS_NATIVE
    type: object
  - name: VM_IMAGE_MAC
    type: object
  - name: VM_IMAGE_MAC_NATIVE
    type: object
  - name: VM_IMAGE_LINUX
    type: object
  - name: VM_IMAGE_LINUX_NATIVE
    type: object

stages:
  - stage: prepare
    displayName: Prepare Build
    jobs:
      - job: prepare                               # Prepare Build
        displayName: Prepare Build
        pool: ${{ parameters.VM_IMAGE_HOST.pool }}
        steps:
          - checkout: none
          - template: azure-templates-variables.yml
            parameters:
              updateBuild: true
          - ${{ if eq(parameters.buildPipelineType, 'build') }}:
            - template: azure-templates-github-status.yml
              parameters:
                context: 'SkiaSharp-Tests'
                state: 'pending'
                displayName: Queue up the status for the tests pipeline
          - ${{ if eq(parameters.buildPipelineType, 'tests') }}:
            - template: azure-templates-github-status.yml

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_windows
      displayName: Native Windows
      dependsOn: prepare
      jobs:
        - template: azure-templates-bootstrapper.yml # Build Native Android|x86 (Win)
          parameters:
            name: native_android_x86_windows
            displayName: Android x86
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x86
            installWindowsSdk: false
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Android|x64 (Win)
          parameters:
            name: native_android_x64_windows
            displayName: Android x64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x64
            installWindowsSdk: false
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Android|arm (Win)
          parameters:
            name: native_android_arm_windows
            displayName: Android arm
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm
            installWindowsSdk: false
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Android|arm64 (Win)
          parameters:
            name: native_android_arm64_windows
            displayName: Android arm64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm64
            installWindowsSdk: false
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Tizen (Win)
          parameters:
            name: native_tizen_windows
            displayName: Tizen
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-tizen
            installWindowsSdk: false
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|x86 (Win)
          parameters:
            name: native_uwp_angle_x86_windows
            displayName: ANGLE x86
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=x86
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|x64 (Win)
          parameters:
            name: native_uwp_angle_x64_windows
            displayName: ANGLE x64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=x64
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|arm (Win)
          parameters:
            name: native_uwp_angle_arm_windows
            displayName: ANGLE arm
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build ANGLE UWP|arm64 (Win)
          parameters:
            name: native_uwp_angle_arm64_windows
            displayName: ANGLE arm64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: ANGLE
            additionalArgs: -Script .\native\uwp\build.cake --buildarch=arm64
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native UWP|x86 (Win)
          parameters:
            name: native_uwp_x86_windows
            displayName: UWP x86
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=x86 --skipAngle=true
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native UWP|x64 (Win)
          parameters:
            name: native_uwp_x64_windows
            displayName: UWP x64
            buildExternals: ${{ parameters.buildExternals }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=x64 --skipAngle=true
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native UWP|arm (Win)
          parameters:
            name: native_uwp_arm_windows
            displayName: UWP arm
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=arm --skipAngle=true
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native UWP|arm64 (Win)
          parameters:
            name: native_uwp_arm64_windows
            displayName: UWP arm64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-uwp
            additionalArgs: --buildarch=arm64 --skipAngle=true
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Win32|x86 (Win)
          parameters:
            name: native_win32_x86_windows
            displayName: Win32 x86
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=x86
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Win32|x64 (Win)
          parameters:
            name: native_win32_x64_windows
            displayName: Win32 x64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=x64
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Win32|arm64 (Win)
          parameters:
            name: native_win32_arm64_windows
            displayName: Win32 arm64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-windows
            additionalArgs: --buildarch=arm64
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native NanoServer|x64 (Win)
          parameters:
            name: native_win32_x64_nanoserver_windows
            displayName: Nano Server x64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS_NATIVE }}
            target: externals-nanoserver
            additionalArgs: --buildarch=x64
            artifactName: native

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_macos
      displayName: Native macOS
      dependsOn: prepare
      jobs:
        - template: azure-templates-bootstrapper.yml # Build Native Android|x86 (macOS)
          parameters:
            name: native_android_x86_macos
            displayName: Android x86
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x86
        - template: azure-templates-bootstrapper.yml # Build Native Android|x64 (macOS)
          parameters:
            name: native_android_x64_macos
            displayName: Android x64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=x64
        - template: azure-templates-bootstrapper.yml # Build Native Android|arm (macOS)
          parameters:
            name: native_android_arm_macos
            displayName: Android arm
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm
        - template: azure-templates-bootstrapper.yml # Build Native Android|arm64 (macOS)
          parameters:
            name: native_android_arm64_macos
            displayName: Android arm64
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-android
            additionalArgs: --buildarch=arm64
        - template: azure-templates-bootstrapper.yml # Build Native iOS (macOS)
          parameters:
            name: native_ios_macos
            displayName: iOS
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-ios
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Mac Catalyst (macOS)
          parameters:
            name: native_maccatalyst_macos
            displayName: Mac Catalyst
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-maccatalyst
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native macOS (macOS)
          parameters:
            name: native_macos_macos
            displayName: macOS
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-macos
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native tvOS (macOS)
          parameters:
            name: native_tvos_macos
            displayName: tvOS
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-tvos
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native watchOS (macOS)
          parameters:
            name: native_watchos_macos
            displayName: watchOS
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-watchos
            artifactName: native
        - template: azure-templates-bootstrapper.yml # Build Native Tizen (macOS)
          parameters:
            name: native_tizen_macos
            displayName: Tizen
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC_NATIVE }}
            target: externals-tizen
            condition: false # TODO: TIZEN INSTALL BUGS

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_linux
      displayName: Native Linux
      dependsOn: prepare
      jobs:
        - template: azure-templates-linux-matrix.yml # Build Native Linux (Linux)
          parameters:
            artifactName: native
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            builds:
              - name: ''
              - name: nodeps
                desc: 'No Deps'
                additionalArgs: --verifyExcluded=fontconfig
                gnArgs: skia_use_fontconfig=false
            matrix:
              - arch: x64
                docker: scripts/Docker/debian9/amd64
              - arch: x64
                variant: alpine
                docker: scripts/Docker/alpine/amd64
              - arch: arm
                docker: scripts/Docker/debian9/clang-cross
                target: externals-linux-clang-cross
              - arch: arm64
                docker: scripts/Docker/debian9/clang-cross
                dockerArgs: --build-arg TOOLCHAIN_ARCH=aarch64-linux-gnu --build-arg TOOLCHAIN_ARCH_SHORT=arm64
                target: externals-linux-clang-cross
        - template: azure-templates-bootstrapper.yml # Build Native Tizen (Linux)
          parameters:
            name: native_tizen_linux
            displayName: Tizen
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            packages: $(TIZEN_LINUX_PACKAGES)
            target: externals-tizen

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: native_wasm
      displayName: Native WASM
      dependsOn: prepare
      jobs:
        - template: azure-templates-wasm-matrix.yml # Build Native WASM (Linux)
          parameters:
            buildExternals: ${{ parameters.buildExternals }}
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX_NATIVE }}
            artifactName: native
            emscripten:
              - 2.0.6:
                displayName: 2.0.6
                version: 2.0.6
                features: none
              - 2.0.23:
                displayName: 2.0.23
                version: 2.0.23
                features: none
              - 3.1.7:
                displayName: 3.1.7
                version: 3.1.7
                features: none
              - 3.1.12:
                displayName: 3.1.12
                version: 3.1.12
                features: st
              - 3.1.12:
                displayName: '3.1.12_SIMD'
                version: 3.1.12
                features: simd
              - 3.1.12:
                displayName: '3.1.12_Threading'
                version: 3.1.12
                features: mt
              - 3.1.12:
                displayName: '3.1.12_Threading_SIMD'
                version: 3.1.12
                features: mt,simd

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: managed
      displayName: Build Managed
      dependsOn:
        - native_windows
        - native_macos
        - native_linux
        - native_wasm
      jobs:
        - template: azure-templates-bootstrapper.yml # Build Managed .NET Framework (Windows)
          parameters:
            name: managed_netfx_windows
            displayName: Managed .NET Framework (Windows)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: libs
            additionalArgs: --skipExternals="all" --solutionType=netfx
            installPreviewVs: true
            requiredArtifacts:
              - name: native
            artifactName: managed
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: azure-templates-bootstrapper.yml # Build Managed .NET (Windows)
          parameters:
            name: managed_net_windows
            displayName: Managed .NET (Windows)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: libs
            additionalArgs: --skipExternals="all" --solutionType=net
            installPreviewVs: true
            requiredArtifacts:
              - name: native
            artifactName: managed
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: azure-templates-bootstrapper.yml # Build Managed (macOS)
          parameters:
            name: managed_macos
            displayName: Managed (macOS)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: libs
            additionalArgs: --skipExternals="all"
            requiredArtifacts:
              - name: native
            artifactName: managed
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder
        - template: azure-templates-bootstrapper.yml # Build Managed (Linux)
          parameters:
            name: managed_linux
            displayName: Managed (Linux)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: libs
            additionalArgs: --skipExternals="all"
            requiredArtifacts:
              - name: native
            artifactName: managed
            postBuildSteps:
              - pwsh: Remove-Item ./output/native/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the native folder

  - ${{ if ne(parameters.buildPipelineType, 'tests') }}:
    - stage: package
      displayName: Package NuGets
      dependsOn: managed
      jobs:
        - template: azure-templates-bootstrapper.yml # Package NuGets
          parameters:
            name: package_windows
            displayName: Package NuGets
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: nuget
            additionalArgs: --packall=true --skipbuild=true
            installWindowsSdk: false
            installAndroidSdk: false
            installDotNet: false
            requiredArtifacts:
              - name: managed
              - name: native
            postBuildSteps:
              - task: PublishBuildArtifacts@1
                displayName: Publish the nuget artifacts
                inputs:
                  artifactName: nuget
                  pathToPublish: 'output/nugets'
              - task: PublishBuildArtifacts@1
                displayName: Publish the special nuget artifacts
                inputs:
                  artifactName: nuget_special
                  pathToPublish: 'output/nugets-special'
              - task: PublishBuildArtifacts@1
                displayName: Publish the special nuget artifacts
                inputs:
                  artifactName: nuget_symbols
                  pathToPublish: 'output/nugets-symbols'
              - task: PublishBuildArtifacts@1
                displayName: Publish the SignList.xml into nuget artifacts
                inputs:
                  artifactName: nuget
                  pathToPublish: 'SignList.xml'
              - pwsh: |
                  Remove-Item ./output/native/ -Recurse -Force
                  Remove-Item ./output/nugets/ -Recurse -Force
                  Remove-Item ./output/nugets-special/ -Recurse -Force
                  Remove-Item ./output/nugets-symbols/ -Recurse -Force
                displayName: Delete the pre-published folders

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: api_diff
      displayName: API Diff
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: package
      jobs:
        - template: azure-templates-bootstrapper.yml # API Diff
          parameters:
            name: api_diff_windows
            displayName: API Diff
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: docs-api-diff
            additionalArgs: --nugetDiffPrerelease=$(NUGET_DIFF_PRERELEASE)
            shouldPublish: false
            requiredArtifacts:
              - name: package_windows
              - name: nuget
                dir: nugets
            preBuildSteps:
              - pwsh: .\scripts\install-gtk.ps1
                displayName: Install GTK# 2.12
            postBuildSteps:
              - task: PublishBuildArtifacts@1
                displayName: Publish the API diffs
                condition: always()
                inputs:
                  artifactName: api-diff
                  pathToPublish: '$(Build.SourcesDirectory)\output\api-diff'

  - ${{ if and(eq(variables['System.TeamProject'], 'devdiv'), ne(parameters.buildPipelineType, 'tests'), ne(variables['System.PullRequest.IsFork'], 'true')) }}:
    - stage: signing
      displayName: Sign NuGets
      dependsOn: package
      jobs:
        - template: sign-artifacts/jobs/v2.yml@xamarin-templates
          parameters:
            ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/patch/')) }}:
              signType: 'Real'
            ${{ if not(or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/patch/'))) }}:
              signType: 'Test'

  - ${{ if and(eq(variables['System.TeamProject'], 'devdiv'), ne(parameters.buildPipelineType, 'tests'), ne(variables['System.PullRequest.IsFork'], 'true')) }}:
    - stage: sbom
      displayName: 'Software Bill of Materials'
      dependsOn: signing
      jobs:
      - template: compliance/sbom/job.v1.yml@xamarin-templates        # Software Bill of Materials (SBOM): https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/ado-sbom-generator
        parameters:
          artifactNames: ['nuget']
          packageName: 'SkiaSharp'
          packageFilter: '*.nupkg'

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: tests
      displayName: Tests
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn:
          - native_windows
          - native_macos
          - native_linux
          - native_wasm
      jobs:
        - template: azure-templates-bootstrapper.yml # Tests|netfx (Windows)
          parameters:
            name: tests_netfx_windows
            displayName: Windows (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            installPreviewVs: true
            installWindowsSdk: false
            shouldPublish: false
            requiredArtifacts:
              - name: native_win32_x86_windows
              - name: native_win32_x64_windows
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Framework test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'Windows .NET Framework Tests'
        - template: azure-templates-bootstrapper.yml # Tests|netcore (Windows)
          parameters:
            name: tests_netcore_windows
            displayName: Windows (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            installWindowsSdk: false
            shouldPublish: false
            requiredArtifacts:
              - name: native_win32_x86_windows
              - name: native_win32_x64_windows
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'Windows .NET Core Tests'
              - task: PublishBuildArtifacts@1
                displayName: 'Publish the code coverage results'
                inputs:
                  artifactName: coverage_netcore_windows
                  pathToPublish: 'output/coverage'
        - template: azure-templates-bootstrapper.yml # Tests|netfx (macOS)
          parameters:
            name: tests_netfx_macos
            displayName: macOS (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_macos_macos
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Mono test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'macOS Mono Tests'
        - template: azure-templates-bootstrapper.yml # Tests|netcore (macOS)
          parameters:
            name: tests_netcore_macos
            displayName: macOS (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_macos_macos
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'macOS .NET Core Tests'
              - task: PublishBuildArtifacts@1
                displayName: 'Publish the code coverage results'
                inputs:
                  artifactName: coverage_netcore_macos
                  pathToPublish: 'output/coverage'
        - template: azure-templates-bootstrapper.yml # Tests|android (macOS)
          parameters:
            name: tests_android_macos
            displayName: Android (macOS)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-android
            additionalArgs: --device=android-emulator-64_30 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_android_x86_macos
              - name: native_android_x64_macos
              - name: native_android_arm_macos
              - name: native_android_arm64_macos
            preBuildSteps:
              - pwsh: .\scripts\install-android-package.ps1 -Package "emulator"
                displayName: Install the Android emulator
              - pwsh: .\scripts\install-android-package.ps1 -Package "system-images;android-30;google_apis_playstore;x86_64"
                displayName: Install the Android API 30 emulator image
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Android test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'output/logs/testlogs/SkiaSharp.Android.Tests/**/TestResults.xml'
                  testRunTitle: 'Android Tests'
              - task: PublishBuildArtifacts@1
                displayName: Publish the test logs
                condition: always()
                inputs:
                  artifactName: testlogs_android
                  pathToPublish: 'output/logs/testlogs'
        - template: azure-templates-bootstrapper.yml # Tests|ios (macOS)
          parameters:
            name: tests_ios_macos
            displayName: iOS (macOS)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: tests-ios
            additionalArgs: --device=ios-simulator-64 --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_ios_macos
            preBuildSteps:
              - template: azure-templates-provisioning-profiles.yml
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the iOS test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'output/logs/testlogs/SkiaSharp.iOS.Tests/**/TestResults.xml'
                  testRunTitle: 'iOS Tests'
              - task: PublishBuildArtifacts@1
                displayName: Publish the test logs
                condition: always()
                inputs:
                  artifactName: testlogs_ios
                  pathToPublish: 'output/logs/testlogs'
        - template: azure-templates-bootstrapper.yml # Tests|netfx (Linux)
          parameters:
            name: tests_netfx_linux
            displayName: Linux (.NET Framework)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: tests-netfx
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_linux_x64_linux
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the Mono test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Desktop.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux Mono Tests'
        - template: azure-templates-bootstrapper.yml # Tests|netcore (Linux)
          parameters:
            name: tests_netcore_linux
            displayName: Linux (.NET Core)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: tests-netcore
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=$(ENABLE_CODE_COVERAGE)
            shouldPublish: false
            requiredArtifacts:
              - name: native_linux_x64_linux
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the .NET Core test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.NetCore.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux .NET Core Tests'
              - task: PublishBuildArtifacts@1
                displayName: 'Publish the code coverage results'
                inputs:
                  artifactName: coverage_netcore_linux
                  pathToPublish: 'output/coverage'
        - template: azure-templates-bootstrapper.yml # Tests [WASM] (Linux)
          parameters:
            name: tests_wasm_linux
            displayName: WASM (Linux)
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES) ninja-build
            target: tests-wasm
            additionalArgs: --skipExternals="all" --throwOnTestFailure=$(THROW_ON_TEST_FAILURE) --coverage=false --chromedriver=$(CHROMEWEBDRIVER)
            shouldPublish: false
            requiredArtifacts:
              - name: native_wasm_linux
            installEmsdk: true
            initScript: source ~/emsdk/emsdk_env.sh
            postBuildSteps:
              - task: PublishTestResults@2
                displayName: Publish the WASM test results
                condition: always()
                inputs:
                  testResultsFormat: xUnit
                  testResultsFiles: 'tests/SkiaSharp*.Wasm.Tests/**/TestResults.xml'
                  testRunTitle: 'Linux WASM Tests'
        # TODO: add tests for linux alpine
        # TODO: add tests for linux no dependencies
        # TODO: add tests for windows nano server
        - job: coverage_reports                      # Coverage Reports
          displayName: Coverage Reports
          pool: ${{ parameters.VM_IMAGE_HOST.pool }}
          dependsOn:
            - tests_netcore_windows
            - tests_netcore_macos
            - tests_netcore_linux
          steps:
            - checkout: self
            - template: azure-templates-variables.yml
            - ${{ if ne(parameters.buildPipelineType, 'both') }}:
              - template: azure-templates-github-status.yml
                parameters:
                  state: 'pending'
            - task: DownloadBuildArtifacts@0
              displayName: Download the coverage_netcore_windows artifact
              inputs:
                artifactName: coverage_netcore_windows
                downloadPath: output
            - task: DownloadBuildArtifacts@0
              displayName: Download the coverage_netcore_macos artifact
              inputs:
                artifactName: coverage_netcore_macos
                downloadPath: output
            - task: DownloadBuildArtifacts@0
              displayName: Download the coverage_netcore_linux artifact
              inputs:
                artifactName: coverage_netcore_linux
                downloadPath: output
            - task: PublishCodeCoverageResults@1
              displayName: 'Publish the code coverage results'
              inputs:
                codeCoverageTool: Cobertura
                summaryFileLocation: 'output/**/Cobertura.xml'
            - ${{ if ne(parameters.buildPipelineType, 'both') }}:
              - template: azure-templates-github-status.yml

  - ${{ if ne(parameters.buildPipelineType, 'build') }}:
    - stage: samples
      displayName: Samples
      ${{ if eq(parameters.buildPipelineType, 'tests') }}:
        dependsOn: prepare
      ${{ if eq(parameters.buildPipelineType, 'both') }}:
        dependsOn: package
      jobs:
        - template: azure-templates-bootstrapper.yml # Build Samples (Windows)
          parameters:
            name: samples_windows
            displayName: Windows
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: samples
            installPreviewVs: true
            requiredArtifacts:
              - name: nuget
                dir: nugets
            postBuildSteps:
              - pwsh: Remove-Item ./output/nugets/ -Recurse -Force -ErrorAction Continue
                displayName: Delete the nugets folder
        - template: azure-templates-bootstrapper.yml # Build Samples (macOS)
          parameters:
            name: samples_macos
            displayName: macOS
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_MAC }}
            target: samples
            shouldPublish: false
            requiredArtifacts:
              - name: nuget
                dir: nugets
            preBuildSteps:
              - template: azure-templates-provisioning-profiles.yml
        - template: azure-templates-bootstrapper.yml # Build Samples (Linux)
          parameters:
            name: samples_linux
            displayName: Linux
            buildPipelineType: ${{ parameters.buildPipelineType }}
            vmImage: ${{ parameters.VM_IMAGE_LINUX }}
            packages: $(MANAGED_LINUX_PACKAGES)
            target: samples
            shouldPublish: false
            requiredArtifacts:
              - name: nuget
                dir: nugets
            installEmsdk: true
            initScript: source ~/emsdk/emsdk_env.sh

  - ${{ if and(eq(variables['System.TeamProject'], 'devdiv'), ne(parameters.buildPipelineType, 'tests')) }}:
    - stage: checks
      displayName: Run Code Checks
      dependsOn: prepare
      jobs:
        - template: azure-templates-bootstrapper.yml # Run Code Checks
          parameters:
            name: native_checks_windows
            displayName: Run Code Checks
            buildPipelineType: ${{ parameters.buildPipelineType }}
            condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/patch/'))
            vmImage: ${{ parameters.VM_IMAGE_WINDOWS}}
            target: git-sync-deps
            installWindowsSdk: false
            installAndroidSdk: false
            installDotNet: false
            shouldPublish: false
            postBuildSteps:
              - task: CredScan@3
                displayName: Analyze source for credentials
                condition: always()
                inputs:
                  suppressionsFile: $(Build.SourcesDirectory)\scripts\guardian\CredScanSuppressions.json
              - task: PoliCheck@2
                displayName: Run PoliCheck
                condition: always()
                inputs:
                  inputType: 'Basic'
                  targetType: 'F'
                  optionsUEPATH: $(Build.SourcesDirectory)\scripts\guardian\PoliCheckExclusions.xml
              - task: SdtReport@2
                displayName: Create security analysis report
                condition: always()
                inputs:
                  GdnExportAllTools: false
                  GdnExportGdnToolCredScan: true
                  GdnExportGdnToolPoliCheck: true
                  GdnExportOutputSuppressionFile: source.gdnsuppress
              - task: PublishSecurityAnalysisLogs@3
                displayName: Publish security analysis logs
                condition: always()
              - pwsh: |
                  $tsaConfig = '$(Build.SourcesDirectory)\scripts\guardian\tsaoptions-v2.json'
                  $tsaConfigJson = Get-Content $tsaConfig | ConvertFrom-Json
                  $tsaConfigJson | Add-Member -Type NoteProperty -Name 'SuppressionFiles' -Value @("$(Build.SourcesDirectory)\scripts\guardian\source.gdnsuppress")
                  $tsaConfigJson | Add-Member -Type NoteProperty -Name 'SuppressionSets' -Value @("default")
                  $tsaConfigJson | ConvertTo-Json | Out-File $tsaConfig
                  cat $tsaConfig
                displayName: Update TSA suppressions
                condition: always()
              - task: TSAUpload@2
                displayName: Publish TSA logs
                condition: always()
                continueOnError: true
                inputs:
                  GdnPublishTsaOnboard: true
                  GdnPublishTsaConfigFile: $(Build.SourcesDirectory)\scripts\guardian\tsaoptions-v2.json

  - ${{ if eq(parameters.buildPipelineType, 'tests') }}:
    - stage: finalize
      displayName: Finalize Build
      dependsOn:
        - api_diff
        - samples
        - tests
      jobs:
        - job: finalize                              # Finalize Build
          displayName: Finalize Build
          pool: ${{ parameters.VM_IMAGE_HOST.pool }}
          steps:
            - checkout: none
            - template: azure-templates-variables.yml
            - template: azure-templates-github-status.yml
              parameters:
                context: 'SkiaSharp-Tests'
                displayName: Update the final status for the tests pipeline
