<Project>

  <PropertyGroup>
    <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' and Exists('/Library/Frameworks/Mono.framework/Versions/Current/bin/mono') ">/Library/Frameworks/Mono.framework/Versions/Current/bin/mono</_ManagedExeLauncher>
    <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' and Exists('/usr/local/bin/mono') ">/usr/local/bin/mono</_ManagedExeLauncher>
    <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' and Exists('/usr/bin/mono') ">/usr/bin/mono</_ManagedExeLauncher>
    <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' and '$(_ManagedExeLauncher)' == '' ">mono</_ManagedExeLauncher>

    <_SnExePath Condition=" '$(OS)' == 'Windows_NT' and '$(_SnExePath)' == '' and Exists('$(SDK40ToolsPath)sn.exe') ">$(SDK40ToolsPath)sn.exe</_SnExePath>
    <_SnExePath Condition=" '$(OS)' == 'Windows_NT' and '$(_SnExePath)' == '' and Exists('$(MSBuildProgramFiles32)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe') ">$(MSBuildProgramFiles32)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe</_SnExePath>
    <_SnExePath Condition=" '$(_SnExePath)' == '' ">sn</_SnExePath>

    <PublicSign Condition=" '$(PublicSign)' == '' and '$(SignAssembly)' == 'true' ">true</PublicSign>
    <KeyFileName Condition=" '$(KeyFileName)' == '' ">mono.snk</KeyFileName>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\$(KeyFileName)</AssemblyOriginatorKeyFile>

    <AssemblyVersionGitSha Condition=" '$(AssemblyVersionGitSha)' == '' ">$(GIT_SHA)</AssemblyVersionGitSha>
    <AssemblyVersionGitSha Condition=" '$(AssemblyVersionGitSha)' == '' ">$(GIT_COMMIT)</AssemblyVersionGitSha>

    <!--
      Suppress version attribute generation in Microsoft.NET.Sdk projects to avoid build failures
      when two sets of attributes are emitted.
    -->
    <GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>

    <!--
      Ignore this message:
        Warning VSX1000
        No Address and User has been specified in order to establish a connection to a Mac Server, so only the main
        assembly was compiled for project '<project name>'. Connect to a Mac Server and try again to build the full
        application.
    -->
    <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);VSX1000</MSBuildWarningsAsMessages>
    <!--
      Ignore this message:
        Warning MSB9004
        ManifestResourceWithNoCulture item type is deprecated. Emit EmbeddedResource items instead, with metadata
        WithCulture='false', Type='Resx', and optional LogicalName.
    -->
    <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);MSB9004</MSBuildWarningsAsMessages>
  </PropertyGroup>

  <PropertyGroup>
    <PackagingPlatform Condition=" '$(PackagingPlatform)' == '' ">$(TargetFramework)</PackagingPlatform>
  </PropertyGroup>

  <ItemGroup Condition=" '$(Configuration)' == 'Release' ">
    <PackageReference Include="mdoc" Version="5.8.9" PrivateAssets="All" GeneratePathProperty="true" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' != '' and $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) != '.NETCoreApp'">
    <Compile Include="$(MSBuildThisFileDirectory)Common\NullableAttributes.generated.cs" Visible="false" />
  </ItemGroup>

  <!-- HACK: Do not copy the native bootstrap files -->
  <Target Name="_RemoveWasdkBootstrapDll" BeforeTargets="ResolveReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(Filename)%(Extension)' == 'Microsoft.WindowsAppRuntime.Bootstrap.dll'" />
    </ItemGroup>
  </Target>

  <!--
    Workaround for https://github.com/dotnet/sdk/issues/11105
  -->
  <ItemGroup>
    <SourceRoot Include="$([MSBuild]::EnsureTrailingSlash($(NuGetPackageRoot)))" Condition="'$(NuGetPackageRoot)' != ''" />
  </ItemGroup>

  <!--
    ===================================================================================================================
    _GenerateAssemblyVersionInfo

    Generate the assembly versioning attributes from the VERSIONS.txt file.
    ===================================================================================================================
  -->
  <PropertyGroup Condition=" '$(SkipGenerateAssemblyVersionInfo)' != 'true' ">
    <_GenerateAssemblyVersionInfoBeforeTargets>
      CoreCompile
    </_GenerateAssemblyVersionInfoBeforeTargets>
  </PropertyGroup>
  <Target Name="_GenerateAssemblyVersionInfo" BeforeTargets="$(_GenerateAssemblyVersionInfoBeforeTargets)" Condition=" '$(SkipGenerateAssemblyVersionInfo)' != 'true' ">
    <PropertyGroup>
      <_VersionSourceFile>$(IntermediateOutputPath)\$(AssemblyName).Version.cs</_VersionSourceFile>
      <_VersionTxtFile>$(MSBuildThisFileDirectory)..\VERSIONS.txt</_VersionTxtFile>
    </PropertyGroup>
    <PropertyGroup>
      <_VersionTxtContents>$([System.IO.File]::ReadAllText($(_VersionTxtFile)))</_VersionTxtContents>
      <_VersionGitSha Condition=" '$(AssemblyVersionGitSha)' != '' ">-$(AssemblyVersionGitSha)</_VersionGitSha>
      <_VersionPackagingGroup>$(PackagingGroup.Split('.')[0])</_VersionPackagingGroup>
      <_VersionAssemblyPattern>^$(_VersionPackagingGroup)\s*assembly\s*(.*)$</_VersionAssemblyPattern>
      <_VersionFilePattern>^$(_VersionPackagingGroup)\s*file\s*(.*)$</_VersionFilePattern>
      <_VersionMilestonePattern>^lib$(_VersionPackagingGroup)\s*milestone\s*(.*)$</_VersionMilestonePattern>
      <_VersionIncrementPattern>^lib$(_VersionPackagingGroup)\s*increment\s*(.*)$</_VersionIncrementPattern>
      <_VersionAssemblyMatch>$([System.Text.RegularExpressions.Regex]::Match($(_VersionTxtContents), $(_VersionAssemblyPattern), System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline).Groups[1].Value.Trim())</_VersionAssemblyMatch>
      <_VersionFileMatch>$([System.Text.RegularExpressions.Regex]::Match($(_VersionTxtContents), $(_VersionFilePattern), System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline).Groups[1].Value.Trim())</_VersionFileMatch>
      <_VersionMilestoneMatch>$([System.Text.RegularExpressions.Regex]::Match($(_VersionTxtContents), $(_VersionMilestonePattern), System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline).Groups[1].Value.Trim())</_VersionMilestoneMatch>
      <_VersionIncrementMatch>$([System.Text.RegularExpressions.Regex]::Match($(_VersionTxtContents), $(_VersionIncrementPattern), System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline).Groups[1].Value.Trim())</_VersionIncrementMatch>
      <_VersionGeneratedContents>
[assembly: System.Reflection.AssemblyVersion("$(_VersionAssemblyMatch)")]
[assembly: System.Reflection.AssemblyFileVersion("$(_VersionFileMatch)")]
[assembly: System.Reflection.AssemblyInformationalVersion("$(_VersionFileMatch)$(_VersionGitSha)")]

internal partial class VersionConstants {
    public const string AssemblyVersion = "$(_VersionAssemblyMatch)"%3B
    public const string AssemblyFileVersion = "$(_VersionFileMatch)"%3B
    public const string AssemblyInformationalVersion = "$(_VersionFileMatch)$(_VersionGitSha)"%3B
    public const string GitSha = "$(_VersionGitSha)"%3B
    public const int Milestone = 0$(_VersionMilestoneMatch)%3B
    public const int Increment = 0$(_VersionIncrementMatch)%3B
}
      </_VersionGeneratedContents>
    </PropertyGroup>
    <WriteLinesToFile Condition=" !Exists('$(_VersionSourceFile)') or '$([System.IO.File]::ReadAllText($(_VersionSourceFile)).Trim())' != '$(_VersionGeneratedContents.Trim())' "
                      File="$(_VersionSourceFile)" Lines="$(_VersionGeneratedContents)" Overwrite="true" />
    <ItemGroup>
      <FileWrites Include="$(_VersionSourceFile)" />
      <Compile Include="$(_VersionSourceFile)" />
    </ItemGroup>
  </Target>

  <!--
    ===================================================================================================================
    _SignAssembly

    Sign the assembly using sn.
    ===================================================================================================================
  -->
  <PropertyGroup Condition=" '$(SignAssembly)' == 'true' and '$(TargetPath)' != '' ">
    <_SignAssemblyAfterTargets>
      CoreCompile
    </_SignAssemblyAfterTargets>
  </PropertyGroup>
  <Target Name="_SignAssembly"
          AfterTargets="$(_SignAssemblyAfterTargets)"
          Condition=" '$(SignAssembly)' == 'true' and '$(TargetPath)' != '' ">
    <Exec Command="&quot;$(_SnExePath)&quot; -q -R @(IntermediateAssembly -> '&quot;%(Identity)&quot;') &quot;$(AssemblyOriginatorKeyFile)&quot;" />
  </Target>

  <!--
    ===================================================================================================================
    _SignAssemblyVerify

    Verify that the output assembly is signed correctly for release.
    ===================================================================================================================
  -->
  <PropertyGroup Condition=" '$(SignAssembly)' == 'true' and '$(Configuration)' == 'Release' and '$(TargetPath)' != '' ">
    <_SignAssemblyVerifyAfterTargets>
      Build
    </_SignAssemblyVerifyAfterTargets>
  </PropertyGroup>
  <Target Name="_SignAssemblyVerify"
          AfterTargets="$(_SignAssemblyVerifyAfterTargets)"
          Condition=" '$(SignAssembly)' == 'true' and '$(Configuration)' == 'Release' and '$(TargetPath)' != '' ">
    <Exec Command="&quot;$(_SnExePath)&quot; -vf &quot;$(TargetPath)&quot;" />
  </Target>

  <!--
    ===================================================================================================================
    _CheckSkiaSharpBuildPropsImported

    Make sure that SkiaSharp.Build.props was added.
    ===================================================================================================================
  -->
  <Target Name="_CheckSkiaSharpBuildPropsImported" BeforeTargets="BeforeBuild">
    <Error Text="SkiaSharp.Build.props was not imported." Condition=" '$(SkiaSharpBuildPropsImported)' != 'true' " />
  </Target>

  <!--
    ===================================================================================================================
    _CopyToOutputDirectory

    Copy the project output into the root output folder.
    ===================================================================================================================
  -->
  <PropertyGroup Condition=" '$(SkipCopyToOutputDirectory)' != 'true' and '$(TargetPath)' != '' ">
    <_CopyToOutputDirectoryAfterTargets>
      Build
    </_CopyToOutputDirectoryAfterTargets>
  </PropertyGroup>
  <Target Name="_CopyToOutputDirectoryDep" DependsOnTargets="$(_CopyToOutputDirectoryDependsOn)">
    <ItemGroup Condition=" '$(PackagingLocation)' == '' ">
      <_CopyItems Include="$(TargetPath)" Dest="nuget\lib\$(PackagingPlatform)\$(TargetFileName)" />
      <_CopyItems Include="$(TargetDir)$(TargetName).xml" Dest="nuget\lib\$(PackagingPlatform)\$(TargetName).xml" Condition=" Exists('$(TargetDir)$(TargetName).xml') " />
      <_CopyItems Include="$(TargetDir)$(TargetName).pdb" Dest="nuget\lib\$(PackagingPlatform)\$(TargetName).pdb" />
    </ItemGroup>
    <ItemGroup Condition=" '$(PackagingLocation)' != '' ">
      <_CopyItems Include="$(TargetPath)" Dest="nuget\$(PackagingLocation)\$(TargetFileName)" />
      <_CopyItems Include="$(TargetDir)$(TargetName).xml" Dest="nuget\$(PackagingLocation)\$(TargetName).xml" Condition=" Exists('$(TargetDir)$(TargetName).xml') " />
      <_CopyItems Include="$(TargetDir)$(TargetName).pdb" Dest="nuget\$(PackagingLocation)\$(TargetName).pdb" />
    </ItemGroup>
    <ItemGroup>
      <_CopyItems Include="@(_NoneWithTargetPath)" Condition=" '%(_NoneWithTargetPath.Extension)' != '.cs' " Dest="%(_NoneWithTargetPath.TargetPath)" />
    </ItemGroup>
  </Target>
  <Target Name="_CopyToOutputDirectory" Condition=" '$(SkipCopyToOutputDirectory)' != 'true' and '$(TargetPath)' != '' "
          AfterTargets="$(_CopyToOutputDirectoryAfterTargets)" DependsOnTargets="_CopyToOutputDirectoryDep"
          Inputs="@(_CopyItems)" Outputs="@(_CopyItems -> '$(MSBuildThisFileDirectory)..\output\$(PackagingGroup)\%(Dest)')">
    <Copy Condition=" '@(_CopyItems)' != '' "
          SourceFiles="@(_CopyItems)"
          DestinationFiles="@(_CopyItems -> '$(MSBuildThisFileDirectory)..\output\$(PackagingGroup)\%(Dest)')"
          ContinueOnError="false"
          Retries="3" />
  </Target>

  <!--
    ===================================================================================================================
    MDocGenerateDocs

    Generated the XML documentation file using mdoc.
    This runs during the build phase.
    ===================================================================================================================
  -->
  <PropertyGroup Condition=" '$(SkipMDocGenerateDocs)' != 'true' and '$(Configuration)' == 'Release' ">
    <MDocGenerateDocsAfterTargets>
      CoreCompile
    </MDocGenerateDocsAfterTargets>
  </PropertyGroup>
  <Target Name="_MDocGenerateDocsDep">
    <PropertyGroup>
      <MDocToolPath>$(Pkgmdoc)\tools\mdoc.exe</MDocToolPath>
      <MDocOutputName>$(TargetName).xml</MDocOutputName>
      <MDocOutputPath>$(TargetDir)$(MDocOutputName)</MDocOutputPath>
      <MDocIntermediateOutputPath>$(IntermediateOutputPath)mdoc\</MDocIntermediateOutputPath>
      <_ShouldGenerateDocs Condition=" '$(MDocDocumentationDirectory)' != '' and Exists('$(MDocDocumentationDirectory)\index.xml') ">true</_ShouldGenerateDocs>
    </PropertyGroup>
    <ItemGroup Condition=" '$(_ShouldGenerateDocs)' == 'true' ">
      <_MDocInputs Include="$(MDocDocumentationDirectory)\**\*" />
    </ItemGroup>
  </Target>
  <Target Name="MDocGenerateDocs" Condition=" '$(SkipMDocGenerateDocs)' != 'true' and '$(Configuration)' == 'Release' "
          AfterTargets="$(MDocGenerateDocsAfterTargets)" DependsOnTargets="_MDocGenerateDocsDep"
          Inputs="@(_MDocInputs)" Outputs="$(MDocOutputPath)">
    <MakeDir Condition=" '$(_ShouldGenerateDocs)' == 'true' "
             Directories="$(MDocIntermediateOutputPath)" />
    <Exec Condition=" '$(_ShouldGenerateDocs)' == 'true' "
          WorkingDirectory="$(MDocIntermediateOutputPath)"
          Command="$(_ManagedExeLauncher) &quot;$(MDocToolPath)&quot; export-msxdoc --quiet=true &quot;$(MDocDocumentationDirectory)&quot;" />
    <Copy Condition=" Exists('$(MDocIntermediateOutputPath)$(MDocOutputName)') "
          SourceFiles="$(MDocIntermediateOutputPath)$(MDocOutputName)"
          DestinationFiles="$(MDocOutputPath)"
          ContinueOnError="false"
          Retries="0" />
    <ItemGroup Condition=" '$(_ShouldGenerateDocs)' == 'true' ">
      <FileWrites Include="$(MDocOutputPath)" />
      <FileWrites Include="$(MDocIntermediateOutputPath)\*" />
    </ItemGroup>
  </Target>

  <!-- HACK: the new IDE seems to not like Analyzers in AdditionalFiles -->
  <Target Name="After_InjectAdditionalFiles" AfterTargets="_InjectAdditionalFiles">
    <ItemGroup>
      <AdditionalFiles Remove="@(AdditionalFiles)" Condition="'%(Extension)' == '.dll'" />
    </ItemGroup>
  </Target>

  <Import Project="SkiaSharp.Build.WinUI.NetCore.targets" Condition=" '$(EnablePriGenTooling)' != 'true' and '$(TargetPlatformIdentifier)' == 'windows' and '$(EnablePreviewMsixTooling)' == 'true' and '$(UseMaui)' != 'true' and '$(UseMauiCore)' != 'true' " />

  <!-- Make sure we always build with a lower version of WinRT.Runtime.dll -->
  <ItemGroup>
    <FrameworkReference Update="Microsoft.Windows.SDK.NET.Ref" RuntimeFrameworkVersion="10.0.19041.24" TargetingPackVersion="10.0.19041.24" />
  </ItemGroup>

</Project>
