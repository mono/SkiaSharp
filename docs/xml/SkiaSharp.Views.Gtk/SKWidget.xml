<Type Name="SKWidget" FullName="SkiaSharp.Views.Gtk.SKWidget">
  <TypeSignature Language="C#" Value="public class SKWidget : Gtk.DrawingArea" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKWidget extends Gtk.DrawingArea" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.Gtk.SKWidget" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gtk.DrawingArea</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A GTK# view that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKWidget ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of <see cref="T:SkiaSharp.Views.Gtk.SKWidget" />.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.Gtk.SKWidget.CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value>
          <para></para>
        </value>
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Destroy">
      <MemberSignature Language="C#" Value="public override void Destroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Destroy() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.Destroy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Destroys a widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SKWidget ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExposeEvent">
      <MemberSignature Language="C#" Value="protected override bool OnExposeEvent (Gdk.EventExpose evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnExposeEvent(class Gdk.EventExpose evnt) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.OnExposeEvent(Gdk.EventExpose)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventExpose" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventExpose" />.</param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ExposeEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" />.</returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ExposeEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintSurface">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintSurface (SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintSurface(class SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Gtk.SKWidget.OnPaintSurface(SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Gtk.SKWidget.OnPaintSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Gtk.SKWidget.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnPaintSurface (SKPaintSurfaceEventArgs e)
{
    // call the base method
    base.OnPaintSurface (e);

    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs&gt; PaintSurface" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Gtk.SKWidget.PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Gtk</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the the canvas needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Gtk.SKWidget.OnPaintSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Gtk.SKWidget.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKControl myView = ...;

myView.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
