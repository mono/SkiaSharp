<Type Name="SKCanvasView" FullName="SkiaSharp.Views.Tizen.SKCanvasView">
  <TypeSignature Language="C#" Value="public class SKCanvasView : SkiaSharp.Views.Tizen.CustomRenderingView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKCanvasView extends SkiaSharp.Views.Tizen.CustomRenderingView" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.Tizen.SKCanvasView" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.Views.Tizen.CustomRenderingView</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A view that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKCanvasView (ElmSharp.EvasObject parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ElmSharp.EvasObject parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Tizen.SKCanvasView.#ctor(ElmSharp.EvasObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="ElmSharp.EvasObject" />
      </Parameters>
      <Docs>
        <param name="parent">The parent object.</param>
        <summary>Simple constructor to use when creating a <see cref="T:SkiaSharp.Views.Tizen.SKCanvasView" /> from code.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSurfaceSize">
      <MemberSignature Language="C#" Value="protected override SkiaSharp.SKSizeI GetSurfaceSize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype SkiaSharp.SKSizeI GetSurfaceSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Tizen.SKCanvasView.GetSurfaceSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSizeI</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implemented by derived <see cref="T:SkiaSharp.Views.Tizen.CustomRenderingView" /> types to provide the dimensions of the current drawing surface.</summary>
        <returns>Returns the current drawing surface dimensions.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePixelScaling">
      <MemberSignature Language="C#" Value="public bool IgnorePixelScaling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePixelScaling" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.Tizen.SKCanvasView.IgnorePixelScaling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the drawing canvas should be resized on high resolution displays.</summary>
        <value>
          <para></para>
        </value>
        <remarks>By default, when <see langword="false" />, the canvas is resized to 1 canvas pixel per display pixel. When <see langword="true" />, the canvas is resized to device independent pixels, and then stretched to fill the view. Although performance is improved and all objects are the same size on different display densities, blurring and pixellation may occur.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawFrame">
      <MemberSignature Language="C#" Value="protected override sealed void OnDrawFrame ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDrawFrame() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Tizen.SKCanvasView.OnDrawFrame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implemented by derived <see cref="T:SkiaSharp.Views.Tizen.CustomRenderingView" /> types to draw the next frame or paint the control.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawFrame">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawFrame (SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawFrame(class SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Tizen.SKCanvasView.OnDrawFrame(SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Tizen.SKCanvasView.OnDrawFrame" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Tizen.SKCanvasView.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnDrawFrame (SKPaintSurfaceEventArgs e)
{
    // call the base method
    base.OnDrawFrame (e);

    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs&gt; PaintSurface" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Tizen.SKCanvasView.PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the surface needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Tizen.SKCanvasView.OnDrawFrame" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Tizen.SKCanvasView.PaintSurface" /> event.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKCanvasView myCanvas = ...;

myCanvas.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSurfaceSize">
      <MemberSignature Language="C#" Value="protected override sealed bool UpdateSurfaceSize (ElmSharp.Rect geometry);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool UpdateSurfaceSize(valuetype ElmSharp.Rect geometry) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Tizen.SKCanvasView.UpdateSurfaceSize(ElmSharp.Rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Tizen</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometry" Type="ElmSharp.Rect" />
      </Parameters>
      <Docs>
        <param name="geometry">The current geometry of the control.</param>
        <summary>Implemented by derived <see cref="T:SkiaSharp.Views.Tizen.CustomRenderingView" /> types to update the drawing surface dimensions.</summary>
        <returns>Returs <see langword="true" /> if the size has changed, otherwise <see langword="false" />.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
