<Type Name="SKCodec" FullName="SkiaSharp.SKCodec">
  <TypeSignature Language="C#" Value="public class SKCodec : SkiaSharp.SKObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKCodec extends SkiaSharp.SKObject" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.SKCodec" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.SKObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>An abstraction layer directly on top of an image codec.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKCodec Create (SkiaSharp.SKData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKCodec Create(class SkiaSharp.SKData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="SkiaSharp.SKData" />
      </Parameters>
      <Docs>
        <param name="data">The data to use when creating the codec.</param>
        <summary>Creates a codec from the specified data.</summary>
        <returns>Returns the new instance of the codec, or null if there was an error.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKCodec Create (SkiaSharp.SKStream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKCodec Create(class SkiaSharp.SKStream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="SkiaSharp.SKStream" />
      </Parameters>
      <Docs>
        <param name="stream">The stream to use when creating the codec.</param>
        <summary>Creates a codec from the specified stream.</summary>
        <returns>Returns the new instance of the codec, or null if there was an error.</returns>
        <remarks>If null is returned, the stream is deleted immediately. Otherwise, the codec takes ownership of it, and will delete it when done with it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodedFormat">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKEncodedImageFormat EncodedFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKEncodedImageFormat EncodedFormat" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.EncodedFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKEncodedImageFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image encoding from the codec.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodedInfo">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKEncodedInfo EncodedInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKEncodedInfo EncodedInfo" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.EncodedInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKEncodedInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoded image information from the codec.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameCount">
      <MemberSignature Language="C#" Value="public int FrameCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FrameCount" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.FrameCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of frames in the encoded image.</summary>
        <value>
          <para></para>
        </value>
        <remarks>May require reading through the stream to determine info about the frames. As such, future decoding calls may require a rewind. For single-frame images, this will be zero.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameInfo">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecFrameInfo[] FrameInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKCodecFrameInfo[] FrameInfo" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.FrameInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecFrameInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the frames in the encoded image.</summary>
        <value>
          <para></para>
        </value>
        <remarks>May require reading through the stream to determine info about the frames. As such, future decoding calls may require a rewind. For single-frame images, this will be an empty array.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputScanline">
      <MemberSignature Language="C#" Value="public int GetOutputScanline (int inputScanline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOutputScanline(int32 inputScanline) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetOutputScanline(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputScanline" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputScanline">The scanline that is located in the encoded data.</param>
        <summary>Returns the output y-coordinate of the row that corresponds to an input y-coordinate.</summary>
        <returns>Returns the output y-coordinate of the row.</returns>
        <remarks>This will equal <paramref name="inputScanline" />, except in the case of strangely encoded image types (bottom-up bmps, interlaced gifs).</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (out byte[] pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels([out] unsigned int8[]&amp; pixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixels" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pixels">The memory block with the decoded bitmap.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, byte[] pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, unsigned int8[] pixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a length of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, out byte[] pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, [out] unsigned int8[]&amp; pixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block with the decoded bitmap.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, SkiaSharp.SKCodecOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, valuetype SkiaSharp.SKCodecOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, SkiaSharp.SKColorTable colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, class SkiaSharp.SKColorTable colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKColorTable,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="colorTable" Type="SkiaSharp.SKColorTable" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="colorTable">The color table to hold the color entries.</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, IntPtr colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, native int colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.IntPtr,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="colorTable" Type="System.IntPtr" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, SkiaSharp.SKCodecOptions options, SkiaSharp.SKColorTable colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, valuetype SkiaSharp.SKCodecOptions options, class SkiaSharp.SKColorTable colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="SkiaSharp.SKColorTable" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <param name="colorTable">The color table to hold the color entries.</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, SkiaSharp.SKCodecOptions options, IntPtr colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, valuetype SkiaSharp.SKCodecOptions options, native int colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="System.IntPtr" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options, SkiaSharp.SKColorTable colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options, class SkiaSharp.SKColorTable colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="SkiaSharp.SKColorTable" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <param name="colorTable">The color table to hold the color entries.</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPixels">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult GetPixels (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options, IntPtr colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult GetPixels(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options, native int colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="System.IntPtr" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The description of the desired output format expected by the caller.</param>
        <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
        <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
        <param name="options">The bitmap decoding options.</param>
        <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
        <param name="colorTableCount">The logical number of color table entries.</param>
        <summary>Decode the bitmap into the specified memory block.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
          <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
          <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledDimensions">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSizeI GetScaledDimensions (float desiredScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKSizeI GetScaledDimensions(float32 desiredScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetScaledDimensions(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSizeI</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredScale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="desiredScale">The desired scale factor.</param>
        <summary>Returns a size that approximately supports the desired scale factor.</summary>
        <returns>Returns a supported size.</returns>
        <remarks>The codec may not be able to scale efficiently to the exact scale factor requested, so return a size that approximates that scale. Upscaling is not supported, so the original size will be returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScanlines">
      <MemberSignature Language="C#" Value="public int GetScanlines (IntPtr dst, int countLines, int rowBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetScanlines(native int dst, int32 countLines, int32 rowBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetScanlines(System.IntPtr,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="System.IntPtr" />
        <Parameter Name="countLines" Type="System.Int32" />
        <Parameter Name="rowBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dst">The memory location to store the scanlines.</param>
        <param name="countLines">The number of lines to write.</param>
        <param name="rowBytes">The number of bytes per row.</param>
        <summary>Writes the next set of scanlines into the destination.</summary>
        <returns>Returns the number of lines successfully decoded.</returns>
        <remarks>If number of lines successfully decoded is less than <paramref name="countLines" />, this will fill the remaining lines with a default value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValidSubset">
      <MemberSignature Language="C#" Value="public bool GetValidSubset (ref SkiaSharp.SKRectI desiredSubset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetValidSubset(valuetype SkiaSharp.SKRectI&amp; desiredSubset) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.GetValidSubset(SkiaSharp.SKRectI@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredSubset" Type="SkiaSharp.SKRectI&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="desiredSubset">The desired subset of the original bounds, which may be modified to a subset which is supported.</param>
        <summary>Modifies the specified subset to one that can decoded from this codec.</summary>
        <returns>Returns true if this codec supports decoding the desired subset, otherwise false. The final subset can be used with <see cref="P:SkiaSharp.SKCodecOptions.Subset" />.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult IncrementalDecode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult IncrementalDecode() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.IncrementalDecode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start or continue the incremental decode.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> if all lines requested in <see cref="M:SkiaSharp.SKCodec.StartIncrementalDecode" /> have been completely decoded. <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" /> otherwise.</returns>
        <remarks>Unlike <see cref="M:SkiaSharp.SKCodec.GetPixels" />, this does not do any filling. This is left up to the caller, since they may be skipping lines or continuing the decode later.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult IncrementalDecode (out int rowsDecoded);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult IncrementalDecode([out] int32&amp; rowsDecoded) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.IncrementalDecode(System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowsDecoded" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rowsDecoded">The total number of lines initialized. Only meaningful if this method returns <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" />.</param>
        <summary>Start or continue the incremental decode.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> if all lines requested in <see cref="M:SkiaSharp.SKCodec.StartIncrementalDecode" /> have been completely decoded. <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" /> otherwise.</returns>
        <remarks>Unlike <see cref="M:SkiaSharp.SKCodec.GetPixels" />, this does not do any filling. This is left up to the caller, since they may be skipping lines or continuing the decode later.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKImageInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKImageInfo Info" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKImageInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image information from the codec.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinBufferedBytesNeeded">
      <MemberSignature Language="C#" Value="public static int MinBufferedBytesNeeded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinBufferedBytesNeeded" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.MinBufferedBytesNeeded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum number of bytes that must be buffered in stream input.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextScanline">
      <MemberSignature Language="C#" Value="public int NextScanline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NextScanline" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.NextScanline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the y-coordinate of the next row to be returned by the scanline decoder.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Origin">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecOrigin Origin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKCodecOrigin Origin" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.Origin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecOrigin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image origin from the codec.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pixels">
      <MemberSignature Language="C#" Value="public byte[] Pixels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Pixels" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.Pixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image data from the codec using the current <see cref="P:SkiaSharp.SKCodec.Info" />.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepetitionCount">
      <MemberSignature Language="C#" Value="public int RepetitionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RepetitionCount" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.RepetitionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of times to repeat, if this image is animated.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para>For infinite repetition of frames, this will be -1.</para>
          <para>May require reading the stream to find the repetition count. As such, future decoding calls may require a rewind. For single-frame images, this will be 0.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScanlineOrder">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecScanlineOrder ScanlineOrder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKCodecScanlineOrder ScanlineOrder" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCodec.ScanlineOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecScanlineOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the order in which scanlines will be returned by the scanline decoder.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipScanlines">
      <MemberSignature Language="C#" Value="public bool SkipScanlines (int countLines);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SkipScanlines(int32 countLines) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.SkipScanlines(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="countLines" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="countLines">The number of scanlines to skip.</param>
        <summary>Skip the specified number of scanlines.</summary>
        <returns>Returns <see langword="true" /> if the scanlines were successfully skipped, otherwise <see langword="false" /> on failure (incomplete input, the number of lines is less than zero, read all the lines).</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartIncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartIncrementalDecode (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartIncrementalDecode(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
        <param name="rowBytes">The stride of the memory to write to.</param>
        <summary>Prepare for an incremental decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartIncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartIncrementalDecode (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartIncrementalDecode(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
        <param name="rowBytes">The stride of the memory to write to.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <summary>Prepare for an incremental decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartIncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartIncrementalDecode (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options, SkiaSharp.SKColorTable colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartIncrementalDecode(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options, class SkiaSharp.SKColorTable colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="SkiaSharp.SKColorTable" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
        <param name="rowBytes">The stride of the memory to write to.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <param name="colorTable">The color table to use.</param>
        <param name="colorTableCount">The size of the color table.</param>
        <summary>Prepare for an incremental decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartIncrementalDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartIncrementalDecode (SkiaSharp.SKImageInfo info, IntPtr pixels, int rowBytes, SkiaSharp.SKCodecOptions options, IntPtr colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartIncrementalDecode(valuetype SkiaSharp.SKImageInfo info, native int pixels, int32 rowBytes, valuetype SkiaSharp.SKCodecOptions options, native int colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="pixels" Type="System.IntPtr" />
        <Parameter Name="rowBytes" Type="System.Int32" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="System.IntPtr" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
        <param name="rowBytes">The stride of the memory to write to.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <param name="colorTable">The pointer to the color table to use.</param>
        <param name="colorTableCount">The size of the color table.</param>
        <summary>Prepare for an incremental decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartScanlineDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartScanlineDecode (SkiaSharp.SKImageInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartScanlineDecode(valuetype SkiaSharp.SKImageInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <summary>Prepare for a scanline decode.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>Not all codecs support this.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartScanlineDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartScanlineDecode (SkiaSharp.SKImageInfo info, SkiaSharp.SKCodecOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartScanlineDecode(valuetype SkiaSharp.SKImageInfo info, valuetype SkiaSharp.SKCodecOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <summary>Prepare for a scanline decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>Not all codecs support this.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartScanlineDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartScanlineDecode (SkiaSharp.SKImageInfo info, SkiaSharp.SKCodecOptions options, SkiaSharp.SKColorTable colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartScanlineDecode(valuetype SkiaSharp.SKImageInfo info, valuetype SkiaSharp.SKCodecOptions options, class SkiaSharp.SKColorTable colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="SkiaSharp.SKColorTable" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <param name="colorTable">The color table to use.</param>
        <param name="colorTableCount">The size of the color table.</param>
        <summary>Prepare for a scanline decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>Not all codecs support this.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartScanlineDecode">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKCodecResult StartScanlineDecode (SkiaSharp.SKImageInfo info, SkiaSharp.SKCodecOptions options, IntPtr colorTable, ref int colorTableCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SkiaSharp.SKCodecResult StartScanlineDecode(valuetype SkiaSharp.SKImageInfo info, valuetype SkiaSharp.SKCodecOptions options, native int colorTable, int32&amp; colorTableCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKCodecResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
        <Parameter Name="options" Type="SkiaSharp.SKCodecOptions" />
        <Parameter Name="colorTable" Type="System.IntPtr" />
        <Parameter Name="colorTableCount" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
        <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
        <param name="colorTable">The pointer to the color table to use.</param>
        <param name="colorTableCount">The size of the color table.</param>
        <summary>Prepare for a scanline decode with the specified options.</summary>
        <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
        <remarks>Not all codecs support this.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
