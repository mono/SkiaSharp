<Type Name="SKCanvas" FullName="SkiaSharp.SKCanvas">
  <TypeSignature Language="C#" Value="public class SKCanvas : SkiaSharp.SKObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKCanvas extends SkiaSharp.SKObject" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.SKCanvas" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.SKObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsulates all of the state about drawing into a device (bitmap or surface).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
## Remarks

A canvas encapsulates all of the state about drawing into a device (bitmap or
surface).

This includes a reference to the device itself, and a stack of matrix/clip
values. For any given draw call (e.g. DrawRect), the geometry of the object
being drawn is transformed by the concatenation of all the matrices in the
stack. The transformed geometry is clipped by the intersection of all of the
clips in the stack.

While the canvas holds the state of the drawing device, the state (style) of
the object being drawn is held by the paint, which is provided as a parameter
to each of the "Draw" methods. The paint holds attributes such as color,
typeface, the text size, the stroke width, the shader (for example, gradients,
patterns), etc.

The canvas is returned when accessing the
<xref:SkiaSharp.SKSurface.Canvas?displayProperty=nameWithType> property of a
surface.

### Construction

SkiaSharp has multiple backends which receive <xref:SkiaSharp.SKCanvas>
drawing commands, including:

 * Raster Surface
 * GPU Surface
 * PDF Document
 * XPS Document _(experimental)_
 * SVG Canvas _(experimental)_
 * Picture
 * Null Canvas _(for testing)_

#### Constructing a Raster Surface

The raster backend draws to a block of memory. This memory can be managed by
SkiaSharp or by the client.

The recommended way of creating a canvas for the Raster and Ganesh backends is
to use a <xref:SkiaSharp.SKSurface>, which is an object that manages the
memory into which the canvas commands are drawn.

```csharp
// define the surface properties
var info = new SKImageInfo(256, 256);

// construct a new surface
var surface = SKSurface.Create(info);

// get the canvas from the surface
var canvas = surface.Canvas;

// draw on the canvas ...
```

Alternatively, we could have specified the memory for the surface explicitly,
instead of asking SkiaSharp to manage it.

```csharp
// define the surface properties
var info = new SKImageInfo(256, 256);

// allocate memory
var memory = Marshal.AllocCoTaskMem(info.BytesSize);

// construct a surface around the existing memory
var surface = SKSurface.Create(info, memory, info.RowBytes);

// get the canvas from the surface
var canvas = surface.Canvas;

// draw on the canvas ...
```

#### Constructing a GPU Surface

GPU surfaces must have a <xref:SkiaSharp.GRContext> object which manages the
GPU context, and related caches for textures and fonts.

<xref:SkiaSharp.GRContext> objects are matched one to one with OpenGL contexts
or Vulkan devices. That is, all <xref:SkiaSharp.SKSurface> instances that will
be rendered to using the same OpenGL context or Vulkan device should share a
<xref:SkiaSharp.GRContext>.

SkiaSharp does not create an OpenGL context or a Vulkan device for you. In
OpenGL mode it also assumes that the correct OpenGL context has been made
current to the current thread when SkiaSharp calls are made.

```csharp
// an OpenGL context must be created and set as current

// define the surface properties
var info = new SKImageInfo(256, 256);

// create the surface
var context = GRContext.Create(GRBackend.OpenGL);
var surface = SKSurface.Create(context, false, info);

// get the canvas from the surface
var canvas = surface.Canvas;

// draw on the canvas ...
```

#### Constructing a PDF Document

The PDF backend uses <xref:SkiaSharp.SKDocument> instead of
<xref:SkiaSharp.SKSurface>, since a document must include multiple pages.

```csharp
// create the document
var stream = SKFileWStream.OpenStream("document.pdf");
var document = SKDocument.CreatePdf(stream);

// get the canvas from the page
var canvas = document.BeginPage(256, 256);

// draw on the canvas ...

// end the page and document
document.EndPage();
document.Close();
```

#### Constructing a XPS Document _(experimental)_

The XPS backend uses <xref:SkiaSharp.SKDocument> instead of
<xref:SkiaSharp.SKSurface>, since a document must include multiple pages.

```csharp
// create the document
var stream = SKFileWStream.OpenStream("document.xps");
var document = SKDocument.CreateXps(stream);

// get the canvas from the page
var canvas = document.BeginPage(256, 256);

// draw on the canvas ...

// end the page and document
document.EndPage();
document.Close();
```

#### Constructing a SVG Canvas _(experimental)_

The SVG backend uses <xref:SkiaSharp.SKSvgCanvas>.

```csharp
// create the canvas
var stream = SKFileWStream.OpenStream("image.svg");
var writer = new SKXmlStreamWriter(stream);
var canvas = SKSvgCanvas.Create(SKRect.Create(256, 256), writer);

// draw on the canvas ...
```

#### Constructing a Picture

The XPS backend uses <xref:SkiaSharp.SKPictureRecorder> instead of
<xref:SkiaSharp.SKSurface>.

```csharp
// create the picture recorder
var recorder = new SKPictureRecorder();

// get the canvas from the page
var canvas = recorder.BeginRecording(SKRect.Create(256, 256));

// draw on the canvas ...

// finish recording
var picture = recorder.EndRecording();
```

#### Constructing a Null Canvas _(for testing)_

The null canvas is a canvas that ignores all drawing commands and does
nothing.

```csharp
// create the dummy canvas
var canvas = new SKNoDrawCanvas(256, 256);

// draw on the canvas ...
```

### Transformations

The canvas supports a number of 2D transformations. Unlike other 2D graphic
systems like CoreGraphics or Cairo, SKCanvas extends the transformations to
include perspectives.

You can use the <xref:SkiaSharp.SKCanvas.Scale%2A>,
<xref:SkiaSharp.SKCanvas.Skew%2A>, <xref:SkiaSharp.SKCanvas.Translate%2A>,
<xref:SkiaSharp.SKCanvas.RotateDegrees%2A>,
<xref:SkiaSharp.SKCanvas.RotateRadians%2A> to perform some of the most common
2D transformations.

For more control you can use the <xref:SkiaSharp.SKCanvas.SetMatrix%2A> to set
an arbitrary transformation using the <xref:SkiaSharp.SKMatrix> and the
<xref:SkiaSharp.SKCanvas.Concat%2A> to concatenate an <xref:SkiaSharp.SKMatrix>
transformation to the current matrix in use.

The <xref:SkiaSharp.SKCanvas.ResetMatrix%2A> can be used to reset the state of
the matrix.

### Drawing

The drawing operations can take a <xref:SkiaSharp.SKPaint> parameter to affect
their drawing. You use <xref:SkiaSharp.SKPaint> objects to cache the style and
color information to draw geometries, texts and bitmaps.

### Clipping and State

It is possible to save the current transformations by calling the
<xref:SkiaSharp.SKCanvas.Save%2A> method which preserves the current
transformation matrix, you can then alter the matrix and restore the previous
state by using the <xref:SkiaSharp.SKCanvas.Restore%2A> or
<xref:SkiaSharp.SKCanvas.RestoreToCount%2A> methods.

Additionally, it is possible to push a new state with
<xref:SkiaSharp.SKCanvas.SaveLayer%2A> which will make an offscreen copy of a
region, and once the drawing is completed, calling the
<xref:SkiaSharp.SKCanvas.Restore> method which copies the offscreen bitmap
into this canvas.

## Examples

```csharp
var info = new SKImageInfo(640, 480);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // set up drawing tools
    var paint = new SKPaint {
        IsAntialias = true,
        Color = new SKColor(0x2c, 0x3e, 0x50),
        StrokeCap = SKStrokeCap.Round
    };

    // create the Xamagon path
    var path = new SKPath();
    path.MoveTo(71.4311121f, 56f);
    path.CubicTo(68.6763107f, 56.0058575f, 65.9796704f, 57.5737917f, 64.5928855f, 59.965729f);
    path.LineTo(43.0238921f, 97.5342563f);
    path.CubicTo(41.6587026f, 99.9325978f, 41.6587026f, 103.067402f, 43.0238921f, 105.465744f);
    path.LineTo(64.5928855f, 143.034271f);
    path.CubicTo(65.9798162f, 145.426228f, 68.6763107f, 146.994582f, 71.4311121f, 147f);
    path.LineTo(114.568946f, 147f);
    path.CubicTo(117.323748f, 146.994143f, 120.020241f, 145.426228f, 121.407172f, 143.034271f);
    path.LineTo(142.976161f, 105.465744f);
    path.CubicTo(144.34135f, 103.067402f, 144.341209f, 99.9325978f, 142.976161f, 97.5342563f);
    path.LineTo(121.407172f, 59.965729f);
    path.CubicTo(120.020241f, 57.5737917f, 117.323748f, 56.0054182f, 114.568946f, 56f);
    path.LineTo(71.4311121f, 56f);
    path.Close();

    // draw the Xamagon path
    canvas.DrawPath(path, paint);
}
```
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKCanvas (SkiaSharp.SKBitmap bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class SkiaSharp.SKBitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.#ctor(SkiaSharp.SKBitmap)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap for the canvas to draw into.</param>
        <summary>Creates a canvas with the specified bitmap to draw into.</summary>
        <remarks>The structure of the bitmap is copied into the canvas.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Replaces all the pixels in the canvas' current clip with the <see cref="P:SkiaSharp.SKColors.Empty" /> color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (SkiaSharp.SKColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype SkiaSharp.SKColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Clear(SkiaSharp.SKColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
      </Parameters>
      <Docs>
        <param name="color">The color to use to replace the pixels in the current clipping region.</param>
        <summary>Replaces all the pixels in the canvas' current clip with the specified color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKRect ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKRect ClipBounds" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use LocalClipBounds instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the current clip (in local coordinates).</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipDeviceBounds">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKRectI ClipDeviceBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKRectI ClipDeviceBounds" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.ClipDeviceBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DeviceClipBounds instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKRectI</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the current clip (in device coordinates).</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipPath">
      <MemberSignature Language="C#" Value="public void ClipPath (SkiaSharp.SKPath path, SkiaSharp.SKClipOperation operation = SkiaSharp.SKClipOperation.Intersect, bool antialias = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipPath(class SkiaSharp.SKPath path, valuetype SkiaSharp.SKClipOperation operation, bool antialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipPath(SkiaSharp.SKPath,SkiaSharp.SKClipOperation,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="operation" Type="SkiaSharp.SKClipOperation" />
        <Parameter Name="antialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The path to combine with the current clip.</param>
        <param name="operation">The clip operator to apply to the current clip</param>
        <param name="antialias">Whether or not the clip should be antialiased.</param>
        <summary>Modify the current clip with the specified path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipPath">
      <MemberSignature Language="C#" Value="public void ClipPath (SkiaSharp.SKPath path, SkiaSharp.SKRegionOperation operation, bool antialias = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipPath(class SkiaSharp.SKPath path, valuetype SkiaSharp.SKRegionOperation operation, bool antialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipPath(SkiaSharp.SKPath,SkiaSharp.SKRegionOperation,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use ClipPath(SKPath, SKClipOperation, bool) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="operation" Type="SkiaSharp.SKRegionOperation" />
        <Parameter Name="antialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The path to combine with the current clip.</param>
        <param name="operation">The region operator to apply to the current clip</param>
        <param name="antialias">Whether or not the clip should be antialiased.</param>
        <summary>Modify the current clip with the specified path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public void ClipRect (SkiaSharp.SKRect rect, SkiaSharp.SKClipOperation operation = SkiaSharp.SKClipOperation.Intersect, bool antialias = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipRect(valuetype SkiaSharp.SKRect rect, valuetype SkiaSharp.SKClipOperation operation, bool antialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect,SkiaSharp.SKClipOperation,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="operation" Type="SkiaSharp.SKClipOperation" />
        <Parameter Name="antialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to combine with the current clip.</param>
        <param name="operation">The clip operator to apply to the current clip.</param>
        <param name="antialias">Whether or not the clip should be antialiased.</param>
        <summary>Modify the current clip with the specified rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public void ClipRect (SkiaSharp.SKRect rect, SkiaSharp.SKRegionOperation operation, bool antialias = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipRect(valuetype SkiaSharp.SKRect rect, valuetype SkiaSharp.SKRegionOperation operation, bool antialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect,SkiaSharp.SKRegionOperation,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use ClipRect(SKRect, SKClipOperation, bool) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="operation" Type="SkiaSharp.SKRegionOperation" />
        <Parameter Name="antialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to combine with the current clip.</param>
        <param name="operation">The region operator to apply to the current clip.</param>
        <param name="antialias">Whether or not the clip should be antialiased.</param>
        <summary>Modify the current clip with the specified rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipRegion">
      <MemberSignature Language="C#" Value="public void ClipRegion (SkiaSharp.SKRegion region, SkiaSharp.SKClipOperation operation = SkiaSharp.SKClipOperation.Intersect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipRegion(class SkiaSharp.SKRegion region, valuetype SkiaSharp.SKClipOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipRegion(SkiaSharp.SKRegion,SkiaSharp.SKClipOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="SkiaSharp.SKRegion" />
        <Parameter Name="operation" Type="SkiaSharp.SKClipOperation" />
      </Parameters>
      <Docs>
        <param name="region">The region to combine with the current clip.</param>
        <param name="operation">The region operator to apply to the current clip.</param>
        <summary>Modify the current clip with the specified region.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipRoundRect">
      <MemberSignature Language="C#" Value="public void ClipRoundRect (SkiaSharp.SKRoundRect rect, SkiaSharp.SKClipOperation operation = SkiaSharp.SKClipOperation.Intersect, bool antialias = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipRoundRect(class SkiaSharp.SKRoundRect rect, valuetype SkiaSharp.SKClipOperation operation, bool antialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ClipRoundRect(SkiaSharp.SKRoundRect,SkiaSharp.SKClipOperation,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRoundRect" />
        <Parameter Name="operation" Type="SkiaSharp.SKClipOperation" />
        <Parameter Name="antialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">The rounded rectangle to combine with the current clip.</param>
        <param name="operation">The clip operator to apply to the current clip</param>
        <param name="antialias">Whether or not the clip should be antialiased.</param>
        <summary>Modify the current clip with the specified rounded rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public void Concat (ref SkiaSharp.SKMatrix m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Concat(valuetype SkiaSharp.SKMatrix&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Concat(SkiaSharp.SKMatrix@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="SkiaSharp.SKMatrix" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Transformation matrix to pre-concatenate.</param>
        <summary>Pre-concatenates the provided transformation matrix with the current transformation matrix.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceClipBounds">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKRectI DeviceClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKRectI DeviceClipBounds" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.DeviceClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKRectI</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the current clip (in device coordinates).</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawAnnotation">
      <MemberSignature Language="C#" Value="public void DrawAnnotation (SkiaSharp.SKRect rect, string key, SkiaSharp.SKData value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawAnnotation(valuetype SkiaSharp.SKRect rect, string key, class SkiaSharp.SKData value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawAnnotation(SkiaSharp.SKRect,System.String,SkiaSharp.SKData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="SkiaSharp.SKData" />
      </Parameters>
      <Docs>
        <param name="rect">The bounds of the annotation.</param>
        <param name="key">The name of the annotation.</param>
        <param name="value">The blob of data to attach to the annotation.</param>
        <summary>Send an key/value pair "annotation" to the canvas.</summary>
        <remarks>
          <para>The caller still retains its ownership of the data (if any).</para>
          <para>Note: on may canvas types, this information is ignored, but some canvases (e.g. recording a picture or drawing to a PDF document) will pass on this information.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public void DrawBitmap (SkiaSharp.SKBitmap bitmap, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmap(class SkiaSharp.SKBitmap bitmap, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="p">The destination coordinates for the bitmap.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws a bitmap on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public void DrawBitmap (SkiaSharp.SKBitmap bitmap, SkiaSharp.SKRect dest, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmap(class SkiaSharp.SKBitmap bitmap, valuetype SkiaSharp.SKRect dest, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="dest" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="dest">The region to draw the bitmap into.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws a bitmap on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public void DrawBitmap (SkiaSharp.SKBitmap bitmap, SkiaSharp.SKRect source, SkiaSharp.SKRect dest, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmap(class SkiaSharp.SKBitmap bitmap, valuetype SkiaSharp.SKRect source, valuetype SkiaSharp.SKRect dest, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="source" Type="SkiaSharp.SKRect" />
        <Parameter Name="dest" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="source">The source region to copy.</param>
        <param name="dest">The region to draw the bitmap into.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws a bitmap on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmap">
      <MemberSignature Language="C#" Value="public void DrawBitmap (SkiaSharp.SKBitmap bitmap, float x, float y, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmap(class SkiaSharp.SKBitmap bitmap, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="x">The destination x-coordinate for the bitmap.</param>
        <param name="y">The destination y-coordinate for the bitmap.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws a bitmap on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmapLattice">
      <MemberSignature Language="C#" Value="public void DrawBitmapLattice (SkiaSharp.SKBitmap bitmap, SkiaSharp.SKLattice lattice, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmapLattice(class SkiaSharp.SKBitmap bitmap, valuetype SkiaSharp.SKLattice lattice, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmapLattice(SkiaSharp.SKBitmap,SkiaSharp.SKLattice,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="lattice" Type="SkiaSharp.SKLattice" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="lattice">The lattice that describes the areas of the bitmap to stretch or shrink.</param>
        <param name="dst">The region to draw the bitmap into.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmapLattice">
      <MemberSignature Language="C#" Value="public void DrawBitmapLattice (SkiaSharp.SKBitmap bitmap, int[] xDivs, int[] yDivs, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmapLattice(class SkiaSharp.SKBitmap bitmap, int32[] xDivs, int32[] yDivs, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmapLattice(SkiaSharp.SKBitmap,System.Int32[],System.Int32[],SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="xDivs" Type="System.Int32[]" />
        <Parameter Name="yDivs" Type="System.Int32[]" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="xDivs">The x-coordinates that divide the bitmap vertically, describing the areas to stretch or shrink.</param>
        <param name="yDivs">The y-coordinates that divide the bitmap horizontally, describing the areas to stretch or shrink.</param>
        <param name="dst">The region to draw the bitmap into.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBitmapNinePatch">
      <MemberSignature Language="C#" Value="public void DrawBitmapNinePatch (SkiaSharp.SKBitmap bitmap, SkiaSharp.SKRectI center, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBitmapNinePatch(class SkiaSharp.SKBitmap bitmap, valuetype SkiaSharp.SKRectI center, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawBitmapNinePatch(SkiaSharp.SKBitmap,SkiaSharp.SKRectI,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="center" Type="SkiaSharp.SKRectI" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to draw.</param>
        <param name="center">The center region within the bitmap to logically divide the bitmap into 9 sections (3x3).</param>
        <param name="dst">The region to draw the bitmap into.</param>
        <param name="paint">The paint to use when drawing the bitmap.</param>
        <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawCircle">
      <MemberSignature Language="C#" Value="public void DrawCircle (SkiaSharp.SKPoint c, float radius, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCircle(valuetype SkiaSharp.SKPoint c, float32 radius, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawCircle(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="SkiaSharp.SKPoint" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="c">The center coordinates.</param>
        <param name="radius">The radius for the circle.</param>
        <param name="paint">The paint to use when drawing the circle.</param>
        <summary>Draws a circle on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawCircle">
      <MemberSignature Language="C#" Value="public void DrawCircle (float cx, float cy, float radius, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCircle(float32 cx, float32 cy, float32 radius, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawCircle(System.Single,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cx" Type="System.Single" />
        <Parameter Name="cy" Type="System.Single" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="cx">The center x-coordinate.</param>
        <param name="cy">The center y-coordinate.</param>
        <param name="radius">The radius for the circle.</param>
        <param name="paint">The paint to use when drawing the circle.</param>
        <summary>Draws a circle on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public void DrawColor (SkiaSharp.SKColor color, SkiaSharp.SKBlendMode mode = SkiaSharp.SKBlendMode.Src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawColor(valuetype SkiaSharp.SKColor color, valuetype SkiaSharp.SKBlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawColor(SkiaSharp.SKColor,SkiaSharp.SKBlendMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
        <Parameter Name="mode" Type="SkiaSharp.SKBlendMode" />
      </Parameters>
      <Docs>
        <param name="color">The color to use to paint the clipping region.</param>
        <param name="mode">The blend mode for the color.</param>
        <summary>Fills the current clipping area with the specified color using the specified color and blend mode.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColor">
      <MemberSignature Language="C#" Value="public void DrawColor (SkiaSharp.SKColor color, SkiaSharp.SKXferMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawColor(valuetype SkiaSharp.SKColor color, valuetype SkiaSharp.SKXferMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawColor(SkiaSharp.SKColor,SkiaSharp.SKXferMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawColor(SKColor, SKBlendMode) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
        <Parameter Name="mode" Type="SkiaSharp.SKXferMode" />
      </Parameters>
      <Docs>
        <param name="color">The color to use to paint the clipping region.</param>
        <param name="mode">The transfer mode for the color.</param>
        <summary>Fills the current clipping area with the specified color using the specified color and transfer mode.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (SkiaSharp.SKImage image, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class SkiaSharp.SKImage image, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="p">The destination coordinates for the image.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws an image on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (SkiaSharp.SKImage image, SkiaSharp.SKRect dest, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class SkiaSharp.SKImage image, valuetype SkiaSharp.SKRect dest, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="dest" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="dest">The region to draw the image into.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws an image on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (SkiaSharp.SKImage image, SkiaSharp.SKRect source, SkiaSharp.SKRect dest, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class SkiaSharp.SKImage image, valuetype SkiaSharp.SKRect source, valuetype SkiaSharp.SKRect dest, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="source" Type="SkiaSharp.SKRect" />
        <Parameter Name="dest" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="source">The source region to copy.</param>
        <param name="dest">The region to draw the image into.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws an image on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (SkiaSharp.SKImage image, float x, float y, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class SkiaSharp.SKImage image, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="x">The destination x-coordinate for the image.</param>
        <param name="y">The destination y-coordinate for the image.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws an image on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImageLattice">
      <MemberSignature Language="C#" Value="public void DrawImageLattice (SkiaSharp.SKImage image, SkiaSharp.SKLattice lattice, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageLattice(class SkiaSharp.SKImage image, valuetype SkiaSharp.SKLattice lattice, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImageLattice(SkiaSharp.SKImage,SkiaSharp.SKLattice,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="lattice" Type="SkiaSharp.SKLattice" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="lattice">The lattice that describes the areas of the image to stretch or shrink.</param>
        <param name="dst">The region to draw the image into.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImageLattice">
      <MemberSignature Language="C#" Value="public void DrawImageLattice (SkiaSharp.SKImage image, int[] xDivs, int[] yDivs, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageLattice(class SkiaSharp.SKImage image, int32[] xDivs, int32[] yDivs, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImageLattice(SkiaSharp.SKImage,System.Int32[],System.Int32[],SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="xDivs" Type="System.Int32[]" />
        <Parameter Name="yDivs" Type="System.Int32[]" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="xDivs">The x-coordinates that divide the image vertically, describing the areas to stretch or shrink.</param>
        <param name="yDivs">The Y-coordinates that divide the image horizontally, describing the areas to stretch or shrink.</param>
        <param name="dst">The region to draw the image into.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImageNinePatch">
      <MemberSignature Language="C#" Value="public void DrawImageNinePatch (SkiaSharp.SKImage image, SkiaSharp.SKRectI center, SkiaSharp.SKRect dst, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageNinePatch(class SkiaSharp.SKImage image, valuetype SkiaSharp.SKRectI center, valuetype SkiaSharp.SKRect dst, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawImageNinePatch(SkiaSharp.SKImage,SkiaSharp.SKRectI,SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="SkiaSharp.SKImage" />
        <Parameter Name="center" Type="SkiaSharp.SKRectI" />
        <Parameter Name="dst" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="image">The image to draw.</param>
        <param name="center">The center region within the image to logically divide the image into 9 sections (3x3).</param>
        <param name="dst">The region to draw the image into.</param>
        <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
        <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (SkiaSharp.SKPoint p0, SkiaSharp.SKPoint p1, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(valuetype SkiaSharp.SKPoint p0, valuetype SkiaSharp.SKPoint p1, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawLine(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="SkiaSharp.SKPoint" />
        <Parameter Name="p1" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="p0">The first point coordinates.</param>
        <param name="p1">The second point coordinates.</param>
        <param name="paint">The paint to use when drawing the line.</param>
        <summary>Draws a line on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (float x0, float y0, float x1, float y1, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(float32 x0, float32 y0, float32 x1, float32 y1, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawLine(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Single" />
        <Parameter Name="y0" Type="System.Single" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="x0">The first point x-coordinate.</param>
        <param name="y0">The first point y-coordinate.</param>
        <param name="x1">The second point x-coordinate.</param>
        <param name="y1">The second point y-coordinate.</param>
        <param name="paint">The paint to use when drawing the line.</param>
        <summary>Draws a line on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLinkDestinationAnnotation">
      <MemberSignature Language="C#" Value="public void DrawLinkDestinationAnnotation (SkiaSharp.SKRect rect, SkiaSharp.SKData value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLinkDestinationAnnotation(valuetype SkiaSharp.SKRect rect, class SkiaSharp.SKData value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,SkiaSharp.SKData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="value" Type="SkiaSharp.SKData" />
      </Parameters>
      <Docs>
        <param name="rect">The bounds of the annotation.</param>
        <param name="value">The data that specifies the name of the link's destination.</param>
        <summary>Annotates the canvas by making the specified rectangle link to a named destination (see <see cref="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,SkiaSharp.SKData)" />).</summary>
        <remarks>
          <para>The caller is responsible for managing its ownership of the data.</para>
          <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLinkDestinationAnnotation">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKData DrawLinkDestinationAnnotation (SkiaSharp.SKRect rect, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SkiaSharp.SKData DrawLinkDestinationAnnotation(valuetype SkiaSharp.SKRect rect, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rect">The bounds of the annotation.</param>
        <param name="value">The name of the link's destination.</param>
        <summary>Annotates the canvas by making the specified rectangle link to a named destination (see <see cref="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,System.String)" />).</summary>
        <returns>Returns the actual data object that was attached to the canvas.</returns>
        <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawNamedDestinationAnnotation">
      <MemberSignature Language="C#" Value="public void DrawNamedDestinationAnnotation (SkiaSharp.SKPoint point, SkiaSharp.SKData value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawNamedDestinationAnnotation(valuetype SkiaSharp.SKPoint point, class SkiaSharp.SKData value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,SkiaSharp.SKData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="SkiaSharp.SKPoint" />
        <Parameter Name="value" Type="SkiaSharp.SKData" />
      </Parameters>
      <Docs>
        <param name="point">The location of the destination.</param>
        <param name="value">The data that specifies the name of the destination.</param>
        <summary>Annotates the canvas by associating a name with the specified point (see <see cref="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,SkiaSharp.SKData)" />).</summary>
        <remarks>
          <para>The caller is responsible for managing its ownership of the data.</para>
          <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawNamedDestinationAnnotation">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKData DrawNamedDestinationAnnotation (SkiaSharp.SKPoint point, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SkiaSharp.SKData DrawNamedDestinationAnnotation(valuetype SkiaSharp.SKPoint point, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="SkiaSharp.SKPoint" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="point">The location of the destination.</param>
        <param name="value">The name of the destination.</param>
        <summary>Annotates the canvas by associating a name with the specified point (see <see cref="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,System.String)" />).</summary>
        <returns>Returns the actual data object that was attached to the canvas.</returns>
        <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawOval">
      <MemberSignature Language="C#" Value="public void DrawOval (SkiaSharp.SKRect rect, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawOval(valuetype SkiaSharp.SKRect rect, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawOval(SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="rect">The bounding box for the oval.</param>
        <param name="paint">The paint to use when drawing the oval.</param>
        <summary>Draws an oval on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawOval">
      <MemberSignature Language="C#" Value="public void DrawOval (SkiaSharp.SKPoint c, SkiaSharp.SKSize r, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawOval(valuetype SkiaSharp.SKPoint c, valuetype SkiaSharp.SKSize r, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawOval(SkiaSharp.SKPoint,SkiaSharp.SKSize,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="SkiaSharp.SKPoint" />
        <Parameter Name="r" Type="SkiaSharp.SKSize" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="c">The center coordinates.</param>
        <param name="r">The radius for the oval.</param>
        <param name="paint">The paint to use when drawing the oval.</param>
        <summary>Draws an oval on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawOval">
      <MemberSignature Language="C#" Value="public void DrawOval (float cx, float cy, float rx, float ry, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawOval(float32 cx, float32 cy, float32 rx, float32 ry, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawOval(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cx" Type="System.Single" />
        <Parameter Name="cy" Type="System.Single" />
        <Parameter Name="rx" Type="System.Single" />
        <Parameter Name="ry" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="cx">The center x-coordinate.</param>
        <param name="cy">The center y-coordinate.</param>
        <param name="rx">The vertical radius for the oval.</param>
        <param name="ry">The horizontal radius for the oval.</param>
        <param name="paint">The paint to use when drawing the oval.</param>
        <summary>Draws an oval on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPaint">
      <MemberSignature Language="C#" Value="public void DrawPaint (SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPaint(class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPaint(SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="paint">The paint used to fill the current clipping path.</param>
        <summary>Fills the current clipping path with the specified paint.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (SkiaSharp.SKPath path, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class SkiaSharp.SKPath path, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPath(SkiaSharp.SKPath,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="path">The path to draw.</param>
        <param name="paint">The paint to use when drawing the path.</param>
        <summary>Draws a path in the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public void DrawPicture (SkiaSharp.SKPicture picture, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPicture(class SkiaSharp.SKPicture picture, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="SkiaSharp.SKPicture" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to draw.</param>
        <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
        <summary>Draws a picture on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public void DrawPicture (SkiaSharp.SKPicture picture, ref SkiaSharp.SKMatrix matrix, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPicture(class SkiaSharp.SKPicture picture, valuetype SkiaSharp.SKMatrix&amp; matrix, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKMatrix@,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="SkiaSharp.SKPicture" />
        <Parameter Name="matrix" Type="SkiaSharp.SKMatrix" RefType="ref" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to draw.</param>
        <param name="matrix">The matrix to apply while painting.</param>
        <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
        <summary>Draws a picture on the canvas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

This is equivalent to calling <xref:SkiaSharp.SKCanvas.Save>, followed by
<xref:SkiaSharp.SKCanvas.Concat(SkiaSharp.SKMatrix@)> with the specified `matrix`,
<xref:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPaint)>
and then <xref:SkiaSharp.SKCanvas.Restore>.

If paint is non-null, the picture is drawn into a temporary buffer, and then
the paint's alpha, color filter, image filter, blend mode are applied to that
buffer as it is drawn to the canvas.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public void DrawPicture (SkiaSharp.SKPicture picture, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPicture(class SkiaSharp.SKPicture picture, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="SkiaSharp.SKPicture" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to draw.</param>
        <param name="p">The destination coordinates for the picture.</param>
        <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
        <summary>Draws a picture on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPicture">
      <MemberSignature Language="C#" Value="public void DrawPicture (SkiaSharp.SKPicture picture, float x, float y, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPicture(class SkiaSharp.SKPicture picture, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="picture" Type="SkiaSharp.SKPicture" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="picture">The picture to draw.</param>
        <param name="x">The destination x-coordinate for the picture.</param>
        <param name="y">The destination y-coordinate for the picture.</param>
        <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
        <summary>Draws a picture on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPoint">
      <MemberSignature Language="C#" Value="public void DrawPoint (SkiaSharp.SKPoint p, SkiaSharp.SKColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPoint(valuetype SkiaSharp.SKPoint p, valuetype SkiaSharp.SKColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPoint(SkiaSharp.SKPoint,SkiaSharp.SKColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
      </Parameters>
      <Docs>
        <param name="p">The coordinates for the point to draw.</param>
        <param name="color">The color to use.</param>
        <summary>Draws a point in the canvas with the specified color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPoint">
      <MemberSignature Language="C#" Value="public void DrawPoint (SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPoint(valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPoint(SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="p">The coordinates for the point to draw.</param>
        <param name="paint">The paint to use when drawing the point.</param>
        <summary>Draws a point in the canvas with the specified color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPoint">
      <MemberSignature Language="C#" Value="public void DrawPoint (float x, float y, SkiaSharp.SKColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPoint(float32 x, float32 y, valuetype SkiaSharp.SKColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate for the point to draw.</param>
        <param name="y">The y-coordinate for the point to draw.</param>
        <param name="color">The color to use.</param>
        <summary>Draws a point in the canvas with the specified color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPoint">
      <MemberSignature Language="C#" Value="public void DrawPoint (float x, float y, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPoint(float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate for the point to draw.</param>
        <param name="y">The y-coordinate for the point to draw.</param>
        <param name="paint">The paint to use when drawing the point.</param>
        <summary>Draws a point in the canvas with the specified color.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPoints">
      <MemberSignature Language="C#" Value="public void DrawPoints (SkiaSharp.SKPointMode mode, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPoints(valuetype SkiaSharp.SKPointMode mode, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPoints(SkiaSharp.SKPointMode,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="SkiaSharp.SKPointMode" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="mode">Determines how the points array will be interpreted: as points, as coordinates to draw lines, or as coordinates of a polygon.</param>
        <param name="points">The array of points to draw.</param>
        <param name="paint">The paint to use when drawing the points.</param>
        <summary>Draws an array of points, lines or a polygon in the canvas, one at a time.</summary>
        <remarks>
          <para>For <see cref="F:SkiaSharp.SKPointMode.Points" />, each point is drawn centered at its coordinate, and its size is specified by the paint's stroke-width. It draws as a square, unless the paint's <see cref="P:SkiaSharp.SKPaint.StrokeCap" /> is <see cref="F:SkiaSharp.SKStrokeCap.Round" />, in which the points are drawn as circles.</para>
          <para></para>
          <para>For <see cref="F:SkiaSharp.SKPointMode.Lines" />, each pair of points is drawn as a line segment, respecting the paint's settings for cap, join and width. </para>
          <para></para>
          <para>For <see cref="F:SkiaSharp.SKPointMode.Polygon" />, the entire array is drawn as a series of connected line segments.</para>
          <para></para>
          <para>Note that, while similar, the line and polygon modes draw slightly differently than the equivalent path built with a series of move to, line to calls, in that the path will draw all of its contours at once, with no interactions if contours intersect each other (think <see cref="F:SkiaSharp.SKBlendMode.Xor" />).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPositionedText">
      <MemberSignature Language="C#" Value="public void DrawPositionedText (byte[] text, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPositionedText(unsigned int8[] text, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPositionedText(System.Byte[],SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="points">The positions for each glyph in the <paramref name="text" /> string.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPositionedText">
      <MemberSignature Language="C#" Value="public void DrawPositionedText (string text, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPositionedText(string text, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPositionedText(System.String,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="points">The positions for each glyph in the <paramref name="text" /> string.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPositionedText">
      <MemberSignature Language="C#" Value="public void DrawPositionedText (IntPtr buffer, int length, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPositionedText(native int buffer, int32 length, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawPositionedText(System.IntPtr,System.Int32,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="points">The positions for each glyph in the <paramref name="buffer." /></param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text from a UTF-8 buffer at specified locations on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRect">
      <MemberSignature Language="C#" Value="public void DrawRect (SkiaSharp.SKRect rect, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRect(valuetype SkiaSharp.SKRect rect, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRect(SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to draw.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rectangle in the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRect">
      <MemberSignature Language="C#" Value="public void DrawRect (float x, float y, float w, float h, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRect(float32 x, float32 y, float32 w, float32 h, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRect(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="w" Type="System.Single" />
        <Parameter Name="h" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate.</param>
        <param name="y">The y-coordinate.</param>
        <param name="w">The rectangle width.</param>
        <param name="h">The rectangle height.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rectangle in the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRegion">
      <MemberSignature Language="C#" Value="public void DrawRegion (SkiaSharp.SKRegion region, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRegion(class SkiaSharp.SKRegion region, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRegion(SkiaSharp.SKRegion,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="SkiaSharp.SKRegion" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="region">The region to be drawn.</param>
        <param name="paint">The paint to use when drawing the region.</param>
        <summary>Draws the outline of the specified region using the specified paint.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public void DrawRoundRect (SkiaSharp.SKRoundRect rect, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRoundRect(class SkiaSharp.SKRoundRect rect, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRoundRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRoundRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="rect">The rounded rectangle to draw.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rounded rectangle in the canvas.</summary>
        <remarks>The paint to use when drawing the rounded rectangle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public void DrawRoundRect (SkiaSharp.SKRect rect, SkiaSharp.SKSize r, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRoundRect(valuetype SkiaSharp.SKRect rect, valuetype SkiaSharp.SKSize r, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRect,SkiaSharp.SKSize,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="r" Type="SkiaSharp.SKSize" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to draw.</param>
        <param name="r">The radius of the oval used to round the corners.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rounded rectangle in the canvas.</summary>
        <remarks>The paint to use when drawing the rectangle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public void DrawRoundRect (SkiaSharp.SKRect rect, float rx, float ry, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRoundRect(valuetype SkiaSharp.SKRect rect, float32 rx, float32 ry, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRect,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="rx" Type="System.Single" />
        <Parameter Name="ry" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to draw.</param>
        <param name="rx">The x-radius of the oval used to round the corners.</param>
        <param name="ry">The y-radius of the oval used to round the corners.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rounded rectangle in the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRoundRect">
      <MemberSignature Language="C#" Value="public void DrawRoundRect (float x, float y, float w, float h, float rx, float ry, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRoundRect(float32 x, float32 y, float32 w, float32 h, float32 rx, float32 ry, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawRoundRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="w" Type="System.Single" />
        <Parameter Name="h" Type="System.Single" />
        <Parameter Name="rx" Type="System.Single" />
        <Parameter Name="ry" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the rectangle.</param>
        <param name="y">The y-coordinate of the rectangle.</param>
        <param name="w">The rectangle width.</param>
        <param name="h">The rectangle height.</param>
        <param name="rx">The x-radius of the oval used to round the corners.</param>
        <param name="ry">The y-radius of the oval used to round the corners.</param>
        <param name="paint">The paint to use when drawing the rectangle.</param>
        <summary>Draws a rounded rectangle in the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawSurface">
      <MemberSignature Language="C#" Value="public void DrawSurface (SkiaSharp.SKSurface surface, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawSurface(class SkiaSharp.SKSurface surface, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawSurface(SkiaSharp.SKSurface,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="SkiaSharp.SKSurface" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="surface">The surface to draw.</param>
        <param name="p">The destination coordinates for the surface.</param>
        <param name="paint">The paint to use when drawing the surface, or <see langword="null" />.</param>
        <summary>Draws a surface on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawSurface">
      <MemberSignature Language="C#" Value="public void DrawSurface (SkiaSharp.SKSurface surface, float x, float y, SkiaSharp.SKPaint paint = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawSurface(class SkiaSharp.SKSurface surface, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawSurface(SkiaSharp.SKSurface,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="SkiaSharp.SKSurface" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="surface">The surface to draw.</param>
        <param name="x">The destination x-coordinate for the surface.</param>
        <param name="y">The destination y-coordinate for the surface.</param>
        <param name="paint">The paint to use when drawing the surface, or <see langword="null" />.</param>
        <summary>Draws a surface on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawText">
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
      </AssemblyInfo>
      <Docs>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Examples

```csharp
var info = new SKImageInfo(512, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // draw left-aligned text, solid
    using (var paint = new SKPaint()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor(0x42, 0x81, 0xA4);
        paint.IsStroke = false;

        canvas.DrawText("Skia", info.Width / 2f, 64.0f, paint);
    }

    // draw centered text, stroked
    using (var paint = new SKPaint()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor(0x9C, 0xAF, 0xB7);
        paint.IsStroke = true;
        paint.StrokeWidth = 3;
        paint.TextAlign = SKTextAlign.Center;

        canvas.DrawText("Skia", info.Width / 2f, 144.0f, paint);
    }

    // draw right-aligned text, scaled
    using (var paint = new SKPaint()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor(0xE6, 0xB8, 0x9C);
        paint.TextScaleX = 1.5f;
        paint.TextAlign = SKTextAlign.Right;

        canvas.DrawText("Skia", info.Width / 2f, 224.0f, paint);
    }
}
```

The example above produces the following:

![SKCanvas, SKPaint and DrawText](xamarin-media/SkiaSharp/SKCanvasDrawText.png "SKCanvas, SKPaint and DrawText")

]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (byte[] text, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(unsigned int8[] text, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.Byte[],SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="p">The coordinates of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (string text, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(string text, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="p">The coordinates of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (string text, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(string text, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawPositionedText instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="points">The positions for each glyph in the <paramref name="text" /> string.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (byte[] text, float x, float y, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(unsigned int8[] text, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.Byte[],System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="x">The x-coordinate of the origin of the text being drawn.</param>
        <param name="y">The y-coordinate of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (IntPtr buffer, int length, SkiaSharp.SKPoint p, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(native int buffer, int32 length, valuetype SkiaSharp.SKPoint p, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="p" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="p">The coordinates of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text encoded in a UTF-8 buffer on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (IntPtr buffer, int length, SkiaSharp.SKPoint[] points, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(native int buffer, int32 length, valuetype SkiaSharp.SKPoint[] points, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawPositionedText instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="points" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="points">The positions for each glyph in the <paramref name="buffer." /></param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text from a UTF-8 buffer at specified locations on the canvas.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (string text, float x, float y, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(string text, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.String,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="x">The x-coordinate of the origin of the text being drawn.</param>
        <param name="y">The y-coordinate of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (byte[] text, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(unsigned int8[] text, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.Byte[],SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawTextOnPath instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (IntPtr buffer, int length, float x, float y, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(native int buffer, int32 length, float32 x, float32 y, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="x">The x-coordinate of the origin of the text being drawn.</param>
        <param name="y">The y-coordinate of the origin of the text being drawn.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text encoded in a UTF-8 buffer on the canvas at the specified coordinates.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (string text, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(string text, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawTextOnPath instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public void DrawText (IntPtr buffer, int length, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawText(native int buffer, int32 length, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.57.0;skiasharp-1.57.1;skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use DrawTextOnPath instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text encoded in a UTF-8 buffer on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (byte[] text, SkiaSharp.SKPath path, SkiaSharp.SKPoint offset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(unsigned int8[] text, class SkiaSharp.SKPath path, valuetype SkiaSharp.SKPoint offset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.Byte[],SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="offset" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="offset">The offset to the path to add to the text's starting position.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (string text, SkiaSharp.SKPath path, SkiaSharp.SKPoint offset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(string text, class SkiaSharp.SKPath path, valuetype SkiaSharp.SKPoint offset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.String,SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="offset" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="offset">The offset to the path to add to the text's starting position.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (byte[] text, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(unsigned int8[] text, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.Byte[],SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Byte[]" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (IntPtr buffer, int length, SkiaSharp.SKPath path, SkiaSharp.SKPoint offset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(native int buffer, int32 length, class SkiaSharp.SKPath path, valuetype SkiaSharp.SKPoint offset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.IntPtr,System.Int32,SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="offset" Type="SkiaSharp.SKPoint" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="offset">The offset to the path to add to the text's starting position.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (string text, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(string text, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.String,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="text">The text to draw.</param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTextOnPath">
      <MemberSignature Language="C#" Value="public void DrawTextOnPath (IntPtr buffer, int length, SkiaSharp.SKPath path, float hOffset, float vOffset, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTextOnPath(native int buffer, int32 length, class SkiaSharp.SKPath path, float32 hOffset, float32 vOffset, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.IntPtr,System.Int32,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
        <Parameter Name="hOffset" Type="System.Single" />
        <Parameter Name="vOffset" Type="System.Single" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
        <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
        <param name="path">The path the text should follow for its baseline.</param>
        <param name="hOffset">The distance along the path to add to the text's starting position.</param>
        <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
        <param name="paint">The paint to use when drawing the text.</param>
        <summary>Draws text encoded in a UTF-8 buffer on the canvas following a path.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawUrlAnnotation">
      <MemberSignature Language="C#" Value="public void DrawUrlAnnotation (SkiaSharp.SKRect rect, SkiaSharp.SKData value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawUrlAnnotation(valuetype SkiaSharp.SKRect rect, class SkiaSharp.SKData value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawUrlAnnotation(SkiaSharp.SKRect,SkiaSharp.SKData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="value" Type="SkiaSharp.SKData" />
      </Parameters>
      <Docs>
        <param name="rect">The bounds of the annotation.</param>
        <param name="value">The data that specifies the URL.</param>
        <summary>Annotates the canvas by associating the specified URL with the specified rectangle (in local coordinates).</summary>
        <remarks>
          <para>The caller is responsible for managing its ownership of the data.</para>
          <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawUrlAnnotation">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKData DrawUrlAnnotation (SkiaSharp.SKRect rect, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SkiaSharp.SKData DrawUrlAnnotation(valuetype SkiaSharp.SKRect rect, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawUrlAnnotation(SkiaSharp.SKRect,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rect">The bounds of the annotation.</param>
        <param name="value">The URL.</param>
        <summary>Annotates the canvas by associating the specified URL with the specified rectangle (in local coordinates).</summary>
        <returns>Returns the actual data object that was attached to the canvas.</returns>
        <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public void DrawVertices (SkiaSharp.SKVertices vertices, SkiaSharp.SKBlendMode mode, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawVertices(class SkiaSharp.SKVertices vertices, valuetype SkiaSharp.SKBlendMode mode, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertices,SkiaSharp.SKBlendMode,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertices" Type="SkiaSharp.SKVertices" />
        <Parameter Name="mode" Type="SkiaSharp.SKBlendMode" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="vertices">The mesh to draw.</param>
        <param name="mode">The blend mode to use to combine the colors with the texture, before being drawn using the paint. Used if both texture coordinates and colors are present.</param>
        <param name="paint">The shader/texture.</param>
        <summary>Draws a set of vertices.</summary>
        <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public void DrawVertices (SkiaSharp.SKVertexMode vmode, SkiaSharp.SKPoint[] vertices, SkiaSharp.SKColor[] colors, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawVertices(valuetype SkiaSharp.SKVertexMode vmode, valuetype SkiaSharp.SKPoint[] vertices, valuetype SkiaSharp.SKColor[] colors, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vmode" Type="SkiaSharp.SKVertexMode" />
        <Parameter Name="vertices" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="vmode">How to interpret the array of vertices.</param>
        <param name="vertices">The array of vertices for the mesh.</param>
        <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
        <param name="paint">The shader/texture.</param>
        <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public void DrawVertices (SkiaSharp.SKVertexMode vmode, SkiaSharp.SKPoint[] vertices, SkiaSharp.SKPoint[] texs, SkiaSharp.SKColor[] colors, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawVertices(valuetype SkiaSharp.SKVertexMode vmode, valuetype SkiaSharp.SKPoint[] vertices, valuetype SkiaSharp.SKPoint[] texs, valuetype SkiaSharp.SKColor[] colors, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vmode" Type="SkiaSharp.SKVertexMode" />
        <Parameter Name="vertices" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="texs" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="vmode">How to interpret the array of vertices.</param>
        <param name="vertices">The array of vertices for the mesh.</param>
        <param name="texs">The coordinates in texture space (not UV space) for each vertex. May be <see langword="null" />.</param>
        <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
        <param name="paint">The shader/texture.</param>
        <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
        <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public void DrawVertices (SkiaSharp.SKVertexMode vmode, SkiaSharp.SKPoint[] vertices, SkiaSharp.SKPoint[] texs, SkiaSharp.SKColor[] colors, ushort[] indices, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawVertices(valuetype SkiaSharp.SKVertexMode vmode, valuetype SkiaSharp.SKPoint[] vertices, valuetype SkiaSharp.SKPoint[] texs, valuetype SkiaSharp.SKColor[] colors, unsigned int16[] indices, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],System.UInt16[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vmode" Type="SkiaSharp.SKVertexMode" />
        <Parameter Name="vertices" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="texs" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="indices" Type="System.UInt16[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="vmode">How to interpret the array of vertices.</param>
        <param name="vertices">The array of vertices for the mesh.</param>
        <param name="texs">The coordinates in texture space (not UV space) for each vertex. May be <see langword="null" />.</param>
        <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
        <param name="indices">The array of indices to reference into the vertex (texture coordinates, colors) array.</param>
        <param name="paint">The shader/texture.</param>
        <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
        <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVertices">
      <MemberSignature Language="C#" Value="public void DrawVertices (SkiaSharp.SKVertexMode vmode, SkiaSharp.SKPoint[] vertices, SkiaSharp.SKPoint[] texs, SkiaSharp.SKColor[] colors, SkiaSharp.SKBlendMode mode, ushort[] indices, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawVertices(valuetype SkiaSharp.SKVertexMode vmode, valuetype SkiaSharp.SKPoint[] vertices, valuetype SkiaSharp.SKPoint[] texs, valuetype SkiaSharp.SKColor[] colors, valuetype SkiaSharp.SKBlendMode mode, unsigned int16[] indices, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKBlendMode,System.UInt16[],SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vmode" Type="SkiaSharp.SKVertexMode" />
        <Parameter Name="vertices" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="texs" Type="SkiaSharp.SKPoint[]" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKBlendMode" />
        <Parameter Name="indices" Type="System.UInt16[]" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="vmode">How to interpret the array of vertices.</param>
        <param name="vertices">The array of vertices for the mesh.</param>
        <param name="texs">The coordinates in texture space (not UV space) for each vertex. May be <see langword="null" />.</param>
        <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
        <param name="mode">The blend mode to use to combine the colors with the texture, before being drawn using the paint. Used if both texture coordinates and colors are present.</param>
        <param name="indices">The array of indices to reference into the vertex (texture coordinates, colors) array.</param>
        <param name="paint">The shader/texture.</param>
        <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
        <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Triggers the immediate execution of all pending draw operations.</summary>
        <remarks>For the GPU backend this will resolve all rendering to the GPU surface backing the surface that owns this canvas.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipBounds">
      <MemberSignature Language="C#" Value="public bool GetClipBounds (ref SkiaSharp.SKRect bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetClipBounds(valuetype SkiaSharp.SKRect&amp; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.GetClipBounds(SkiaSharp.SKRect@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use GetLocalClipBounds instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="SkiaSharp.SKRect" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="bounds">The resulting clip bounds.</param>
        <summary>Returns the bounds of the current clip (in local coordinates).</summary>
        <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
        <remarks>This can be useful in that it tells you that drawing outside of these bounds will be clipped out.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipDeviceBounds">
      <MemberSignature Language="C#" Value="public bool GetClipDeviceBounds (ref SkiaSharp.SKRectI bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetClipDeviceBounds(valuetype SkiaSharp.SKRectI&amp; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.GetClipDeviceBounds(SkiaSharp.SKRectI@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="skiasharp-1.58.0;skiasharp-1.58.1;skiasharp-1.59.0;skiasharp-1.59.1;skiasharp-1.59.2;skiasharp-1.59.3">
          <AttributeName>System.Obsolete("Use GetDeviceClipBounds instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="SkiaSharp.SKRectI" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="bounds">The resulting clip bounds.</param>
        <summary>Returns the bounds of the current clip (in device coordinates).</summary>
        <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeviceClipBounds">
      <MemberSignature Language="C#" Value="public bool GetDeviceClipBounds (out SkiaSharp.SKRectI bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetDeviceClipBounds([out] valuetype SkiaSharp.SKRectI&amp; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.GetDeviceClipBounds(SkiaSharp.SKRectI@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="SkiaSharp.SKRectI" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bounds">The resulting clip bounds.</param>
        <summary>Returns the bounds of the current clip (in device coordinates).</summary>
        <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalClipBounds">
      <MemberSignature Language="C#" Value="public bool GetLocalClipBounds (out SkiaSharp.SKRect bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetLocalClipBounds([out] valuetype SkiaSharp.SKRect&amp; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.GetLocalClipBounds(SkiaSharp.SKRect@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="SkiaSharp.SKRect" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bounds">The resulting clip bounds.</param>
        <summary>Returns the bounds of the current clip (in local coordinates).</summary>
        <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
        <remarks>This can be useful in that it tells you that drawing outside of these bounds will be clipped out.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalClipBounds">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKRect LocalClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKRect LocalClipBounds" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.LocalClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the current clip (in local coordinates).</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public bool QuickReject (SkiaSharp.SKPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool QuickReject(class SkiaSharp.SKPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.QuickReject(SkiaSharp.SKPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="SkiaSharp.SKPath" />
      </Parameters>
      <Docs>
        <param name="path">The path to compare with the current clip.</param>
        <summary>Checks to see if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip.</summary>
        <returns>Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip.</returns>
        <remarks>Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickReject">
      <MemberSignature Language="C#" Value="public bool QuickReject (SkiaSharp.SKRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool QuickReject(valuetype SkiaSharp.SKRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.QuickReject(SkiaSharp.SKRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="SkiaSharp.SKRect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to compare with the current clip.</param>
        <summary>Checks to see if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip.</summary>
        <returns>Returns true if the rectangle (transformed by the canvas' matrix) does not intersect with the canvas' clip.</returns>
        <remarks>Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMatrix">
      <MemberSignature Language="C#" Value="public void ResetMatrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetMatrix() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.ResetMatrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the current matrix to identity.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Restore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restore the canvas state.</summary>
        <remarks>This call balances a previous call to <see cref="M:SkiaSharp.SKCanvas.Save" />, and is used to remove all modifications to the matrix, clip and draw filter state since the last save call. It is an error to restore more times than was previously saved.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreToCount">
      <MemberSignature Language="C#" Value="public void RestoreToCount (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreToCount(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The number of <see cref="M:SkiaSharp.SKCanvas.Save" /> levels to restore from, or -1 to restore all the way back to the initial value.</param>
        <summary>Efficiently restores the state to a specific level.</summary>
        <remarks>Efficient way to pop any calls to <see cref="M:SkiaSharp.SKCanvas.Save" /> that happened after the save count reached <paramref name="count" />. It is an error for <paramref name="count" /> to be greater than <see cref="P:SkiaSharp.SKCanvas.SaveCount" />. To pop all the way back to the initial matrix/clip context set count to -1.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateDegrees">
      <MemberSignature Language="C#" Value="public void RotateDegrees (float degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateDegrees(float32 degrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="degrees">The number of degrees to rotate.</param>
        <summary>Pre-concatenates the current matrix with the specified rotation.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateDegrees">
      <MemberSignature Language="C#" Value="public void RotateDegrees (float degrees, float px, float py);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateDegrees(float32 degrees, float32 px, float32 py) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Single" />
        <Parameter Name="px" Type="System.Single" />
        <Parameter Name="py" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="degrees">The number of degrees to rotate.</param>
        <param name="px">The x-coordinate of the point to rotate about.</param>
        <param name="py">The y-coordinate of the point to rotate about.</param>
        <summary>Pre-concatenates the current matrix with the specified rotation, around the specified point.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateRadians">
      <MemberSignature Language="C#" Value="public void RotateRadians (float radians);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateRadians(float32 radians) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.RotateRadians(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radians" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="radians">The number of radians to rotate.</param>
        <summary>Pre-concatenates the current matrix with the specified rotation.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateRadians">
      <MemberSignature Language="C#" Value="public void RotateRadians (float radians, float px, float py);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateRadians(float32 radians, float32 px, float32 py) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.RotateRadians(System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radians" Type="System.Single" />
        <Parameter Name="px" Type="System.Single" />
        <Parameter Name="py" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="radians">The number of radians to rotate.</param>
        <param name="px">The x-coordinate of the point to rotate about.</param>
        <param name="py">The y-coordinate of the point to rotate about.</param>
        <summary>Pre-concatenates the current matrix with the specified rotation, around the specified point.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public int Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Save" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the canvas state.</summary>
        <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)" /> to balance this save.</returns>
        <remarks>This call saves the current matrix, clip, and draw filter, and pushes a copy onto a private stack. Subsequent calls to translate, scale, rotate, skew, concatenate or clipping path or drawing filter all operate on this copy. When the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made, the previous matrix, clipping, and drawing filters are restored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCount">
      <MemberSignature Language="C#" Value="public int SaveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SaveCount" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.SaveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of matrix/clip states on the canvas' private stack.</summary>
        <value></value>
        <remarks>This will equal the number of <see cref="M:SkiaSharp.SKCanvas.Save" /> calls minus <see cref="M:SkiaSharp.SKCanvas.Restore" /> calls + 1. The save count on a new canvas is 1.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public int SaveLayer (SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveLayer(class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="paint">This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</param>
        <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
        <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)" /> to balance this save.</returns>
        <remarks>This behaves the same as <see cref="M:SkiaSharp.SKCanvas.Save" /> but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made is that offscreen transfered to the canvas (or the previous layer).</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLayer">
      <MemberSignature Language="C#" Value="public int SaveLayer (SkiaSharp.SKRect limit, SkiaSharp.SKPaint paint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveLayer(valuetype SkiaSharp.SKRect limit, class SkiaSharp.SKPaint paint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKRect,SkiaSharp.SKPaint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="SkiaSharp.SKRect" />
        <Parameter Name="paint" Type="SkiaSharp.SKPaint" />
      </Parameters>
      <Docs>
        <param name="limit">This clipping rectangle hint to limit the size of the offscreen bitmap.</param>
        <param name="paint">This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</param>
        <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
        <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)" /> to balance this save.</returns>
        <remarks>
          <para>This behaves the same as <see cref="M:SkiaSharp.SKCanvas.Save" /> but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made is that offscreen transfered to the canvas (or the previous layer).</para>
          <para>The limit rectangle, is used as a hint to limit the size of the offscreen bitmap, and thus drawing may be clipped to it, though that clipping is not guaranteed to happen. If exact clipping is desired, use <see cref="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect,SkiaSharp.SKClipOperation,System.Boolean)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (SkiaSharp.SKPoint size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype SkiaSharp.SKPoint size) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Scale(SkiaSharp.SKPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="SkiaSharp.SKPoint" />
      </Parameters>
      <Docs>
        <param name="size">The amount to scale.</param>
        <summary>Pre-concatenates the current matrix with the specified scale.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 s) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Scale(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">The amount to scale.</param>
        <summary>Pre-concatenates the current matrix with the specified scale.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to scale in the x-direction.</param>
        <param name="sy">The amount to scale in the y-direction.</param>
        <summary>Pre-concatenates the current matrix with the specified scale.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float sx, float sy, float px, float py);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 sx, float32 sy, float32 px, float32 py) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="px" Type="System.Single" />
        <Parameter Name="py" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to scale in the x-direction.</param>
        <param name="sy">The amount to scale in the y-direction.</param>
        <param name="px">The x-coordinate for the scaling center.</param>
        <param name="py">The y-coordinate for the scaling center.</param>
        <summary>Pre-concatenates the current matrix with the specified scale, at the specific offset.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMatrix">
      <MemberSignature Language="C#" Value="public void SetMatrix (SkiaSharp.SKMatrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMatrix(valuetype SkiaSharp.SKMatrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.SetMatrix(SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="matrix">The matrix that will be copied into the current matrix.</param>
        <summary>Replaces the current matrix with a copy of the specified matrix.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public void Skew (SkiaSharp.SKPoint skew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skew(valuetype SkiaSharp.SKPoint skew) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Skew(SkiaSharp.SKPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skew" Type="SkiaSharp.SKPoint" />
      </Parameters>
      <Docs>
        <param name="skew">The amount to skew.</param>
        <summary>Pre-concatenates the current matrix with the specified skew.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public void Skew (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skew(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Skew(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The amount to skew in the x-direction.</param>
        <param name="sy">The amount to skew in the y-direction.</param>
        <summary>Pre-concatenates the current matrix with the specified skew.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMatrix">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKMatrix TotalMatrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKMatrix TotalMatrix" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.SKCanvas.TotalMatrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKMatrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current matrix on the canvas.</summary>
        <value></value>
        <remarks>This does not account for the translate in any of the devices.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (SkiaSharp.SKPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(valuetype SkiaSharp.SKPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Translate(SkiaSharp.SKPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="SkiaSharp.SKPoint" />
      </Parameters>
      <Docs>
        <param name="point">The distance to translate.</param>
        <summary>Pre-concatenates the current matrix with the specified translation.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKCanvas.Translate(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">The distance to translate in the x-direction</param>
        <param name="dy">The distance to translate in the y-direction.</param>
        <summary>Pre-concatenates the current matrix with the specified translation.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
