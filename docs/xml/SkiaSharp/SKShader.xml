<Type Name="SKShader" FullName="SkiaSharp.SKShader">
  <TypeSignature Language="C#" Value="public class SKShader : SkiaSharp.SKObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKShader extends SkiaSharp.SKObject" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.SKShader" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.SKObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Shaders specify the source color(s) for what is being drawn in the <see cref="T:SkiaSharp.SKPaint" />.</summary>
    <remarks>
      <para>Shaders specify the source colors for what is being drawn. If a paint has no shader, then the paint's color is used. If the paint has a shader, then the shader's colors are used instead, but they are modulated by the paint's alpha. </para>
      <para></para>
      <para>This makes it easy to create a shader once (e.g. bitmap tiling or gradient) and then change its transparency without having to modify the original shader, only the paint's alpha needs to be modified.</para>
      <para>Shaders are created by calling one of the static “Create” methods in the SKShader method that create a shader of the appropriate type.</para>
      <format type="text/html">
        <h2>Linear Gradient Shader</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var shader = SKShader.CreateLinearGradient (new SKPoint (0, 0), new SKPoint (255, 255), colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);
]]></code>
      </example>
      <para>
        <img href="linear.png" />
      </para>
      <format type="text/html">
        <h2>Radial Gradient Shader</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 0, 255),
    new SKColor (0, 255, 0)
};
var shader = SKShader.CreateRadialGradient (new SKPoint (128, 128), 180, colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () {
    Shader = shader,
};
canvas.DrawPaint (paint);]]></code>
      </example>
      <para>
        <img href="radial.png" />
      </para>
      <format type="text/html">
        <h2>Two-point Conical Gradient Shader</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 0, 255),
    new SKColor (0, 255, 0)
};
var shader = SKShader.CreateTwoPointConicalGradient (new SKPoint (128, 128), 128, new SKPoint (128, 16), 16, colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () {
    Shader = shader,
};
canvas.DrawPaint (paint);]]></code>
      </example>
      <para>
        <img href="twopoint.png" />
      </para>
      <format type="text/html">
        <h2>Sweep Gradient Shader</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 255, 255),
    new SKColor (255, 0, 255),
    new SKColor (255, 255, 0),
    new SKColor (0, 255, 255)
};
var shader = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var paint = new SKPaint () {
    Shader = shader
};
canvas.DrawPaint (paint);]]></code>
      </example>
      <format type="text/html">
        <h2>Fractal Perlin Noise</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[var shader = SKShader.CreatePerlinNoiseFractalNoise (0.5f, 0.5f, 4, 0);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
      </example>
      <para>
        <img href="fractalnoise.png" />
      </para>
      <format type="text/html">
        <h2>Turbulence Perlin Noise</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var paint = new SKPaint () { Shader = turbulence };
canvas.DrawPaint (paint);]]></code>
      </example>
      <para>
        <img href="turbulence.png" />
      </para>
      <format type="text/html">
        <h2>Compose Shader</h2>
      </format>
      <example>
        <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var sweep = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var shader = SKShader.CreateCompose (sweep, turbulence);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
      </example>
      <para>
        <img href="compose.png" />
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateBitmap">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateBitmap (SkiaSharp.SKBitmap src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateBitmap(class SkiaSharp.SKBitmap src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="src">The bitmap to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
        <summary>Creates a new shader that will draw with the specified bitmap.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para>If the bitmap cannot be used (has no pixels, or its dimensions exceed implementation limits) then an empty shader may be returned. </para>
          <para>If the source bitmap’s color type is <see cref="F:SkiaSharp.SKColorType.Alpha8" /> then that mask will be colorized using the color on the paint.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBitmap">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateBitmap (SkiaSharp.SKBitmap src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateBitmap(class SkiaSharp.SKBitmap src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="src">The bitmap to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a new shader that will draw with the specified bitmap.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para>If the bitmap cannot be used (has no pixels, or its dimensions exceed implementation limits) then an empty shader may be returned. </para>
          <para>If the source bitmap’s color type is <see cref="F:SkiaSharp.SKColorType.Alpha8" /> then that mask will be colorized using the color on the paint.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColor">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateColor (SkiaSharp.SKColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateColor(valuetype SkiaSharp.SKColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateColor(SkiaSharp.SKColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
      </Parameters>
      <Docs>
        <param name="color">The color to paint.</param>
        <summary>Creates a new shader that just draws the specified color.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColorFilter">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateColorFilter (SkiaSharp.SKShader shader, SkiaSharp.SKColorFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateColorFilter(class SkiaSharp.SKShader shader, class SkiaSharp.SKColorFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateColorFilter(SkiaSharp.SKShader,SkiaSharp.SKColorFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shader" Type="SkiaSharp.SKShader" />
        <Parameter Name="filter" Type="SkiaSharp.SKColorFilter" />
      </Parameters>
      <Docs>
        <param name="shader">The shader to apply.</param>
        <param name="filter">The color filter to apply.</param>
        <summary>Creates a new shader that produces the same colors as invoking this shader and then applying the color filter.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompose">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateCompose (SkiaSharp.SKShader shaderA, SkiaSharp.SKShader shaderB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateCompose(class SkiaSharp.SKShader shaderA, class SkiaSharp.SKShader shaderB) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderA" Type="SkiaSharp.SKShader" />
        <Parameter Name="shaderB" Type="SkiaSharp.SKShader" />
      </Parameters>
      <Docs>
        <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
        <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
        <summary>Create a new compose shader, which combines two shaders by the <see cref="F:SkiaSharp.SKXferMode.SrcOver" /> blend mode.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <example>
            <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var sweep = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var shader = SKShader.CreateCompose (sweep, turbulence);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
          </example>
          <para>
            <img href="compose.png" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompose">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateCompose (SkiaSharp.SKShader shaderA, SkiaSharp.SKShader shaderB, SkiaSharp.SKBlendMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateCompose(class SkiaSharp.SKShader shaderA, class SkiaSharp.SKShader shaderB, valuetype SkiaSharp.SKBlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader,SkiaSharp.SKBlendMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderA" Type="SkiaSharp.SKShader" />
        <Parameter Name="shaderB" Type="SkiaSharp.SKShader" />
        <Parameter Name="mode" Type="SkiaSharp.SKBlendMode" />
      </Parameters>
      <Docs>
        <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
        <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
        <param name="mode">The blend mode that combines the two shaders.</param>
        <summary>Create a new compose shader, which combines two shaders by a blend mode.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompose">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateCompose (SkiaSharp.SKShader shaderA, SkiaSharp.SKShader shaderB, SkiaSharp.SKXferMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateCompose(class SkiaSharp.SKShader shaderA, class SkiaSharp.SKShader shaderB, valuetype SkiaSharp.SKXferMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader,SkiaSharp.SKXferMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use CreateCompose(SKShader, SKShader, SKBlendMode) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderA" Type="SkiaSharp.SKShader" />
        <Parameter Name="shaderB" Type="SkiaSharp.SKShader" />
        <Parameter Name="mode" Type="SkiaSharp.SKXferMode" />
      </Parameters>
      <Docs>
        <param name="shaderA">The colors from this shader are seen as the destination by the transfer mode.</param>
        <param name="shaderB">The colors from this shader are seen as the source by the transfer mode.</param>
        <param name="mode">The transfer mode that combines the two shaders.</param>
        <summary>Create a new compose shader, which combines two shaders by a transfer mode.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEmpty">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateEmpty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new "empty” shader that will not draw anything.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="start">The start point for the gradient.</param>
        <param name="end">The end point for the gradient.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <example>
            <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var shader = SKShader.CreateLinearGradient (new SKPoint (0, 0), new SKPoint (255, 255), colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);
]]></code>
          </example>
          <para>
            <img href="linear.png" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="start">The start point for the gradient.</param>
        <param name="end">The end point for the gradient.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLocalMatrix">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLocalMatrix (SkiaSharp.SKShader shader, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLocalMatrix(class SkiaSharp.SKShader shader, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLocalMatrix(SkiaSharp.SKShader,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shader" Type="SkiaSharp.SKShader" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="shader">The shader to apply.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that first applies the specified matrix and then applies the shader.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseFractalNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseFractalNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseFractalNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <summary>Creates a new shader that draws Perlin fractal noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseFractalNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseFractalNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKPointI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseFractalNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKPointI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKPointI" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
        <summary>Creates a new shader that draws Perlin fractal noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseTurbulence">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseTurbulence (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseTurbulence(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseTurbulence">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseTurbulence (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKPointI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseTurbulence(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKPointI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKPointI" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
        <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="center">The center of the circle for this gradient.</param>
        <param name="radius">The positive radius of the circle for this gradient.</param>
        <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="center">The center of the circle for this gradient.</param>
        <param name="radius">The positive radius of the circle for this gradient.</param>
        <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="startRadius" Type="System.Single" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="endRadius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="start">The coordinates for the starting point.</param>
        <param name="startRadius">The radius at the starting point.</param>
        <param name="end">The coordinates for the end point.</param>
        <param name="endRadius">The radius at the end point.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a conical gradient given two circles.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="startRadius" Type="System.Single" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="endRadius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="start">The coordinates for the starting point.</param>
        <param name="startRadius">The radius at the starting point.</param>
        <param name="end">The coordinates for the end point.</param>
        <param name="endRadius">The radius at the end point.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a conical gradient given two circles.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
