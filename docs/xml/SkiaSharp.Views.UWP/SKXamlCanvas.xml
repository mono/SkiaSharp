<Type Name="SKXamlCanvas" FullName="SkiaSharp.Views.UWP.SKXamlCanvas">
  <TypeSignature Language="C#" Value="public class SKXamlCanvas : Windows.UI.Xaml.Controls.Canvas" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKXamlCanvas extends Windows.UI.Xaml.Controls.Canvas" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.UWP.SKXamlCanvas" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Windows.UI.Xaml.Controls.Canvas</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A XAML canvas that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKXamlCanvas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKXamlCanvas.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:SkiaSharp.Views.UWP.SKXamlCanvas" />.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.UWP.SKXamlCanvas.CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value />
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dpi">
      <MemberSignature Language="C#" Value="public double Dpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Dpi" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.UWP.SKXamlCanvas.Dpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current dpi for the canvas.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePixelScaling">
      <MemberSignature Language="C#" Value="public bool IgnorePixelScaling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePixelScaling" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.UWP.SKXamlCanvas.IgnorePixelScaling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the drawing canvas should be resized on high resolution displays.</summary>
        <value>
          <para></para>
        </value>
        <remarks>By default, when <see langword="false" />, the canvas is resized to 1 canvas pixel per display pixel. When <see langword="true" />, the canvas is resized to device independent pixels, and then stretched to fill the view. Although performance is improved and all objects are the same size on different display densities, blurring and pixellation may occur.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKXamlCanvas.Invalidate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the entire surface of the control and causes the control to be redrawn.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintSurface">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintSurface (SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintSurface(class SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKXamlCanvas.OnPaintSurface(SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.UWP.SKXamlCanvas.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.UWP.SKXamlCanvas.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnPaintSurface (SKPaintSurfaceEventArgs e)
{
    // call the base method
    base.OnPaintSurface (e);

    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs&gt; PaintSurface" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.UWP.SKXamlCanvas.PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the surface needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.UWP.SKXamlCanvas.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.UWP.SKXamlCanvas.PaintSurface" /> event.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKXamlCanvas myCanvas = ...;

myCanvas.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
