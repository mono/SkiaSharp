<Type Name="SKSwapChainPanel" FullName="SkiaSharp.Views.UWP.SKSwapChainPanel">
  <TypeSignature Language="C#" Value="public class SKSwapChainPanel : SkiaSharp.Views.UWP.AngleSwapChainPanel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKSwapChainPanel extends SkiaSharp.Views.UWP.AngleSwapChainPanel" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.UWP.SKSwapChainPanel" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.Views.UWP.AngleSwapChainPanel</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A SwapChainPanel that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKSwapChainPanel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKSwapChainPanel.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:SkiaSharp.Views.UWP.SKSwapChainPanel" />.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override Windows.Foundation.Size ArrangeOverride (Windows.Foundation.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Windows.Foundation.Size ArrangeOverride(valuetype Windows.Foundation.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKSwapChainPanel.ArrangeOverride(Windows.Foundation.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="Windows.Foundation.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
        <summary>Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.</summary>
        <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.UWP.SKSwapChainPanel.CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value />
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GRContext">
      <MemberSignature Language="C#" Value="public SkiaSharp.GRContext GRContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SkiaSharp.GRContext GRContext" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.UWP.SKSwapChainPanel.GRContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.GRContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current GPU context.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintSurface">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintSurface (SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintSurface(class SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKSwapChainPanel.OnPaintSurface(SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.UWP.SKSwapChainPanel.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.UWP.SKSwapChainPanel.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnPaintSurface (SKPaintGLSurfaceEventArgs e)
{
    // call the base method
    base.OnPaintSurface (e);

    var surface = e.Surface;
    var surfaceWidth = e.RenderTarget.Width;
    var surfaceHeight = e.RenderTarget.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRenderFrame">
      <MemberSignature Language="C#" Value="protected override void OnRenderFrame (Windows.Foundation.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRenderFrame(valuetype Windows.Foundation.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.UWP.SKSwapChainPanel.OnRenderFrame(Windows.Foundation.Rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Windows.Foundation.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to draw.</param>
        <summary>Called to draw the current frame within the passed-in rectangle.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs&gt; PaintSurface" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.UWP.SKSwapChainPanel.PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.UWP</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the surface needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.UWP.SKSwapChainPanel.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.UWP.SKSwapChainPanel.PaintSurface" /> event.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKSwapChainPanel myPanel = ...;

myPanel.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.RenderTarget.Width;
    var surfaceHeight = e.RenderTarget.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
