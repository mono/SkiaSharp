<Type Name="GLTextureView+IGLWrapper" FullName="SkiaSharp.Views.Android.GLTextureView+IGLWrapper">
  <TypeSignature Language="C#" Value="public interface GLTextureView.IGLWrapper" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract GLTextureView/IGLWrapper" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.Android.GLTextureView.IGLWrapper" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.Android</AssemblyName>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>An interface used to wrap a GL interface.</summary>
    <remarks>Typically used for implementing debugging and tracing on top of the default GL interface. You would typically use this by creating your own class that implemented all the GL methods by delegating to another GL instance. Then you could add your own behavior before or after calling the delegate. All the wrapper would do was instantiate and return the wrapped GL instance.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public Javax.Microedition.Khronos.Opengles.IGL Wrap (Javax.Microedition.Khronos.Opengles.IGL gl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Microedition.Khronos.Opengles.IGL Wrap(class Javax.Microedition.Khronos.Opengles.IGL gl) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Android.GLTextureView.IGLWrapper.Wrap(Javax.Microedition.Khronos.Opengles.IGL)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Android</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Javax.Microedition.Khronos.Opengles.IGL</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gl" Type="Javax.Microedition.Khronos.Opengles.IGL" />
      </Parameters>
      <Docs>
        <param name="gl">The GL interface that is to be wrapped.</param>
        <summary>Wraps a GL interface in another GL interface.</summary>
        <returns>Returns the wrapped GL interface.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
