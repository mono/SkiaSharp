<Type Name="SKCanvasView" FullName="SkiaSharp.Views.Forms.SKCanvasView">
  <TypeSignature Language="C#" Value="public class SKCanvasView : Xamarin.Forms.View, SkiaSharp.Views.Forms.ISKCanvasViewController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKCanvasView extends Xamarin.Forms.View implements class SkiaSharp.Views.Forms.ISKCanvasViewController, class Xamarin.Forms.IElementController, class Xamarin.Forms.IViewController, class Xamarin.Forms.IVisualElementController" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.Views.Forms.SKCanvasView" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
    <AssemblyVersion>1.57.0.0</AssemblyVersion>
    <AssemblyVersion>1.58.0.0</AssemblyVersion>
    <AssemblyVersion>1.59.0.0</AssemblyVersion>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>SkiaSharp.Views.Forms.ISKCanvasViewController</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Xamarin.Forms.RenderWith(typeof(SkiaSharp.Views.Forms.SKCanvasViewRenderer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A view that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKCanvasView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:SkiaSharp.Views.Forms.SKCanvasView" /> view.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.Forms.SKCanvasView.CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value />
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTouchEvents">
      <MemberSignature Language="C#" Value="public bool EnableTouchEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTouchEvents" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.Forms.SKCanvasView.EnableTouchEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether or not to enable touch events for this view.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTouchEventsProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty EnableTouchEventsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty EnableTouchEventsProperty" />
      <MemberSignature Language="DocId" Value="F:SkiaSharp.Views.Forms.SKCanvasView.EnableTouchEventsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implements the <see cref="P:SkiaSharp.Views.Forms.SKCanvasView.EnableTouchEvents" /> property, and allows the <see cref="T:SkiaSharp.Views.Forms.SKCanvasView" /> class to bind it to properties on other objects at run time.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePixelScaling">
      <MemberSignature Language="C#" Value="public bool IgnorePixelScaling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePixelScaling" />
      <MemberSignature Language="DocId" Value="P:SkiaSharp.Views.Forms.SKCanvasView.IgnorePixelScaling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the drawing canvas should be resized on high resolution displays.</summary>
        <value>
          <para></para>
        </value>
        <remarks>By default, when false, the canvas is resized to 1 canvas pixel per display pixel. When true, the canvas is resized to device independent pixels, and then stretched to fill the view. Although performance is improved and all objects are the same size on different display densities, blurring and pixellation may occur.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePixelScalingProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty IgnorePixelScalingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty IgnorePixelScalingProperty" />
      <MemberSignature Language="DocId" Value="F:SkiaSharp.Views.Forms.SKCanvasView.IgnorePixelScalingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implements the <see cref="P:SkiaSharp.Views.Forms.SKCanvasView.IgnorePixelScaling" /> property, and allows the <see cref="T:SkiaSharp.Views.Forms.SKCanvasView" /> class to bind it to properties on other objects at run time.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateSurface">
      <MemberSignature Language="C#" Value="public void InvalidateSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateSurface() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.InvalidateSurface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informs the canvas that it needs to redraw itself.</summary>
        <remarks>This needs to be called from the main thread.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasure">
      <MemberSignature Language="C#" Value="protected override Xamarin.Forms.SizeRequest OnMeasure (double widthConstraint, double heightConstraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Xamarin.Forms.SizeRequest OnMeasure(float64 widthConstraint, float64 heightConstraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.OnMeasure(System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.SizeRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthConstraint" Type="System.Double" />
        <Parameter Name="heightConstraint" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="widthConstraint">The width constraint.</param>
        <param name="heightConstraint">The height constraint.</param>
        <summary>Method that is called when a layout measurement happens.</summary>
        <returns>Returens the requested size for the layout.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintSurface">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintSurface (SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintSurface(class SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.OnPaintSurface(SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SkiaSharp.Views.Forms.ISKCanvasViewController.OnPaintSurface(SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Forms.SKCanvasView.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.Forms.SKCanvasView.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnPaintSurface (SKPaintSurfaceEventArgs e)
{
    // call the base method
    base.OnPaintSurface (e);

    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouch">
      <MemberSignature Language="C#" Value="protected virtual void OnTouch (SkiaSharp.Views.Forms.SKTouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouch(class SkiaSharp.Views.Forms.SKTouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.OnTouch(SkiaSharp.Views.Forms.SKTouchEventArgs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SkiaSharp.Views.Forms.ISKCanvasViewController.OnTouch(SkiaSharp.Views.Forms.SKTouchEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Forms.SKTouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the touch information.</param>
        <summary>Implement this to handle touch events on the canvas.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs&gt; PaintSurface" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Forms.SKCanvasView.PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.57.0.0</AssemblyVersion>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the the canvas needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Forms.SKCanvasView.OnPaintSurface" /> method, or by attaching a handler to the  <see cref="E:SkiaSharp.Views.Forms.SKCanvasView.PaintSurface" /> event.
              </para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKCanvasView myView = ...;

myView.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkiaSharp.Views.Forms.ISKCanvasViewController.GetCanvasSize">
      <MemberSignature Language="C#" Value="event EventHandler&lt;SkiaSharp.Views.Forms.GetPropertyValueEventArgs&lt;SkiaSharp.SKSize&gt;&gt; SkiaSharp.Views.Forms.ISKCanvasViewController.GetCanvasSize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Forms.GetPropertyValueEventArgs`1&lt;valuetype SkiaSharp.SKSize&gt;&gt; SkiaSharp.Views.Forms.ISKCanvasViewController.GetCanvasSize" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Forms.SKCanvasView.SkiaSharp#Views#Forms#ISKCanvasViewController#GetCanvasSize" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:SkiaSharp.Views.Forms.ISKCanvasViewController.GetCanvasSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Forms.GetPropertyValueEventArgs&lt;SkiaSharp.SKSize&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The event that is raised when the Xamarin.Forms view requests the size of the current SkiaSharp surface.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SkiaSharp.Views.Forms.ISKCanvasViewController.OnPaintSurface">
      <MemberSignature Language="C#" Value="void ISKCanvasViewController.OnPaintSurface (SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void SkiaSharp.Views.Forms.ISKCanvasViewController.OnPaintSurface(class SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.SkiaSharp#Views#Forms#ISKCanvasViewController#OnPaintSurface(SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SkiaSharp.Views.Forms.ISKCanvasViewController.OnPaintSurface(SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>The method that is invoked when the native SkiaSharp surface is being repainted.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SkiaSharp.Views.Forms.ISKCanvasViewController.OnTouch">
      <MemberSignature Language="C#" Value="void ISKCanvasViewController.OnTouch (SkiaSharp.Views.Forms.SKTouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void SkiaSharp.Views.Forms.ISKCanvasViewController.OnTouch(class SkiaSharp.Views.Forms.SKTouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.Views.Forms.SKCanvasView.SkiaSharp#Views#Forms#ISKCanvasViewController#OnTouch(SkiaSharp.Views.Forms.SKTouchEventArgs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SkiaSharp.Views.Forms.ISKCanvasViewController.OnTouch(SkiaSharp.Views.Forms.SKTouchEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Forms.SKTouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the touch information.</param>
        <summary>The method that is invoked when there is a touch event on the native view.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SkiaSharp.Views.Forms.ISKCanvasViewController.SurfaceInvalidated">
      <MemberSignature Language="C#" Value="event EventHandler SkiaSharp.Views.Forms.ISKCanvasViewController.SurfaceInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SkiaSharp.Views.Forms.ISKCanvasViewController.SurfaceInvalidated" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Forms.SKCanvasView.SkiaSharp#Views#Forms#ISKCanvasViewController#SurfaceInvalidated" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:SkiaSharp.Views.Forms.ISKCanvasViewController.SurfaceInvalidated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The event that is raised when the Xamarin.Forms view requests the native view be repainted.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Touch">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.Forms.SKTouchEventArgs&gt; Touch;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Forms.SKTouchEventArgs&gt; Touch" />
      <MemberSignature Language="DocId" Value="E:SkiaSharp.Views.Forms.SKCanvasView.Touch" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
        <AssemblyVersion>1.58.0.0</AssemblyVersion>
        <AssemblyVersion>1.59.0.0</AssemblyVersion>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Forms.SKTouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the the canvas received a touch event.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
