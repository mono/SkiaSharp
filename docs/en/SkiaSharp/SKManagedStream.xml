<Type Name="SKManagedStream" FullName="SkiaSharp.SKManagedStream">
  <TypeSignature Language="C#" Value="public class SKManagedStream : SkiaSharp.SKStreamAsset" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SKManagedStream extends SkiaSharp.SKStreamAsset" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.49.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.SKStreamAsset</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wraps a <see cref="T:System.IO.Stream" /> into a <see cref="T:SkiaSharp.SKStreamAsset" /> (a seekable, rewindable Skia Stream)</summary>
    <remarks>
      <para>The following example shows how to wrap a <see cref="T:System.IO.Stream" /> that represents a stream into an embedded resource in an assembly and use it with Skia APIs that use resources:</para>
      <para>
      </para>
      <para>
      </para>
      <example>
        <code lang="C#"><![CDATA[public static void BitmapShader (SKCanvas canvas, int width, int height)
{
    var assembly = typeof(Demos).GetTypeInfo ().Assembly;

    // load the image from the embedded resource stream
    using (var resource = assembly.GetManifestResourceStream ("embedded.png"))
    using (var stream = new SKManagedStream(resource)) 
    using (var source = SKBitmap.Decode (stream)) {
        var matrix = SKMatrix.MakeRotation (30.0f);
        using (var shader = SKShader.CreateBitmap (source, SKShaderTileMode.Repeat, SKShaderTileMode.Repeat, matrix))
        using (var paint = new SKPaint ()) {
            paint.IsAntialias = true;
            paint.Shader = shader;

            // tile the bitmap
            canvas.Clear (SKColors.White);
            canvas.DrawPaint (paint);
        }
    }
}]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKManagedStream (System.IO.Stream managedStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream managedStream) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.49.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="managedStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="managedStream">The managed stream</param>
        <summary>Constructrs a new SKManagedStream from a <see cref="T:System.IO.Stream" />.</summary>
        <remarks>The underlying stream is not disposed when this object is disposed.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKManagedStream (System.IO.Stream managedStream, bool disposeManagedStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream managedStream, bool disposeManagedStream) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.49.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="managedStream" Type="System.IO.Stream" />
        <Parameter Name="disposeManagedStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="managedStream">The managed stream</param>
        <param name="disposeManagedStream">If this is set to <see langword="true" />, the provided <see langword="managedStream" /> will be disposed when this instance is disposed.</param>
        <summary>Constructrs a new SKManagedStream from a <see cref="T:System.IO.Stream" />, can optionally dispose the provided stream on Dispose.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.49.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
